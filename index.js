const express = require("express");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const jwt = require("jsonwebtoken");
require("dotenv").config();

const sequelize = require("./config/db");
const authRoutes = require("./routes/authRoutes"); // ‚úÖ –ø—Ä—è–º–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ

const app = express();
const PORT = process.env.PORT || 10000;
const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ CORS
app.use(cors({
  origin: ["https://leanavtologistika.netlify.app"],
  methods: ["GET", "POST", "PUT", "DELETE"],
  allowedHeaders: ["Content-Type", "Authorization"]
}));

// ‚úÖ JSON parser
app.use(express.json());

// ‚úÖ Content-Type
app.use((req, res, next) => {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  next();
});

// üîç –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  const log = `[${new Date().toISOString()}] Method: ${req.method}, URL: ${req.url}, IP: ${req.ip}`;
  console.log(log);

  fs.appendFile("server.log", log + "\n", (err) => {
    if (err) console.error("Error writing log:", err.message);
  });

  next();
});

// üîê Middleware: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.status(401).json({ message: "Access token required" });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = user;
    next();
  });
};

// ‚úÖ –ü—Ä—è–º–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–ª–æ–≥—ñ–Ω—É
app.use("/", authRoutes); // üëà –¥–æ–∑–≤–æ–ª—è—î POST /register –Ω–∞–ø—Ä—è–º—É

// üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —Ä–æ—É—Ç—ñ–≤ –∑ /routes
const routesDir = path.join(__dirname, "routes");
fs.readdirSync(routesDir).forEach((file) => {
  if (file.endsWith(".js") && file !== "authRoutes.js") {
    const filePath = path.join(routesDir, file);
    const router = require(filePath);

    if (typeof router === "function" && router.stack) {
      const routeBase = file === "index.js" ? "/" : `/${file.replace(".js", "")}`;
      app.use(`/api${routeBase}`, router);
      console.log(`[ROUTES] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ: /api${routeBase}`);
    } else {
      console.warn(`[ROUTES] –ü—Ä–æ–ø—É—â–µ–Ω–æ ${file} ‚Äî –Ω–µ express.Router`);
    }
  }
});

// üì¶ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
app.use((req, res, next) => {
  const originalSend = res.send;
  res.send = function (body) {
    console.log(`[RESPONSE] –°—Ç–∞—Ç—É—Å: ${res.statusCode}, –í—ñ–¥–ø–æ–≤—ñ–¥—å:`, body);
    fs.appendFile(
      "server.log",
      `[${new Date().toISOString()}] Response Status: ${res.statusCode}, Body: ${JSON.stringify(body)}\n`,
      (err) => {
        if (err) console.error("Error writing log:", err.message);
      }
    );
    originalSend.apply(res, arguments);
  };
  next();
});

// üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
sequelize
  .authenticate()
  .then(() => console.log(`[DATABASE] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ`))
  .catch((error) => {
    console.error(`[DATABASE] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:`, error.message);
    process.exit(1);
  });

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`[SERVER] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
