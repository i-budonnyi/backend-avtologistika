// üìà server.js ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ Express
const express = require("express");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const jwt = require("jsonwebtoken");
require("dotenv").config();

const sequelize = require("./config/db");
const authRoutes = require("./routes/authRoutes");
const { register, login } = require("./controllers/authController");

const app = express();
const PORT = process.env.PORT || 10000;
const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ CORS
app.use(cors({
  origin: ["https://leanavtologistika.netlify.app"],
  methods: ["GET", "POST", "PUT", "DELETE"],
  allowedHeaders: ["Content-Type", "Authorization"]
}));

// ‚úÖ JSON –ø–∞—Ä—Å–µ—Ä
app.use(express.json());

// ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ Content-Type
app.use((req, res, next) => {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  next();
});

// üìù –ì–ª–æ–±–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res, next) => {
  const now = new Date().toISOString();
  const log = `[${now}] ${req.method} ${req.originalUrl} ‚Äî IP: ${req.ip}`;
  console.log("\n" + log);
  console.log("üî∏ Headers:", req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log("üì¶ Body:", req.body);
  }
  fs.appendFile("server.log", log + "\n", (err) => {
    if (err) console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ª–æ–≥—É:", err.message);
  });
  next();
});

// üîê Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Access token required" });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid token" });
    req.user = user;
    next();
  });
};

// ‚úÖ –ü—Ä—è–º—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
app.post("/login", login);
app.post("/register", register);

// ‚úÖ –û–∫—Ä–µ–º–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ authRoutes
app.use("/api/authRoutes", authRoutes);

// üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ä–æ—É—Ç–∏ –∑ /routes
const routesDir = path.join(__dirname, "routes");

fs.readdirSync(routesDir).forEach((file) => {
  if (file.endsWith(".js") && file !== "authRoutes.js") {
    const filePath = path.join(routesDir, file);
    const router = require(filePath);

    if (typeof router === "function" && router.stack) {
      const routeBase = file === "index.js" ? "/" : `/${file.replace(".js", "")}`;
      const fullPath = `/api${routeBase}`;

      app.use(fullPath, (req, res, next) => {
        console.log(`üì• [ROUTE] –ó–∞–ø–∏—Ç –Ω–∞ ${req.method} ${fullPath}${req.url}`);
        next();
      }, router);

      console.log(`[ROUTES] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ: ${fullPath}`);
    } else {
      console.warn(`[ROUTES] –ü—Ä–æ–ø—É—â–µ–Ω–æ ${file} ‚Äî –Ω–µ express.Router`);
    }
  }
});

// üì§ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (—Ç—ñ–ª—å–∫–∏ –¥–ª—è JSON)
app.use((req, res, next) => {
  const originalSend = res.send;
  res.send = function (body) {
    console.log(`[RESPONSE] ${res.statusCode} =>`, body);
    fs.appendFile(
      "server.log",
      `[${new Date().toISOString()}] Response ${res.statusCode}: ${JSON.stringify(body)}\n`,
      (err) => {
        if (err) console.error("–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", err.message);
      }
    );
    originalSend.apply(res, arguments);
  };
  next();
});

// üîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
sequelize.authenticate()
  .then(() => console.log("[DATABASE] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ"))
  .catch((error) => {
    console.error("[DATABASE] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", error.message);
    process.exit(1);
  });

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`[SERVER] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
