// backend/controllers/applicationController.js
const { QueryTypes } = require("sequelize");
const sequelize      = require("../config/database");
const { io }         = require("../index");

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏                       */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const createApplication = async (req, res) => {
  console.group("üöÄ  [POST] /api/applicationRoutes  ‚ñ∏  createApplication");
  try {
    /* 1-A. –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ */
    const { user_id, title, content, idea_id, type } = req.body;
    console.log("üì• –í—Ö—ñ–¥–Ω—ñ:", { user_id, title, content, idea_id, type });

    /* 1-B. –í–∞–ª—ñ–¥–∞—Ü—ñ—è */
    if (!user_id || !title || !content || !idea_id || !type) {
      console.warn("‚ö†Ô∏è –ù–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ");
      return res.status(400).json({ message: "–ù–µ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!" });
    }
    if (!["idea", "problem"].includes(type)) {
      console.warn("‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø", type);
      return res.status(400).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –∑–∞—è–≤–∫–∏!" });
    }

    /* 1-C. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å */
    console.log("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—å‚Ä¶");
    const duplicate = await sequelize.query(
      `SELECT id FROM applications WHERE user_id = :user_id AND idea_id = :idea_id`,
      { replacements: { user_id, idea_id }, type: QueryTypes.SELECT }
    );
    console.log("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:", duplicate);

    if (duplicate.length) {
      console.warn("üö´ –î—É–±–ª—å –∑–Ω–∞–π–¥–µ–Ω–æ");
      return res.status(409).json({ message: "–ó–∞—è–≤–∫—É –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ü—ñ—î—ó —ñ–¥–µ—ó." });
    }

    /* 1-D. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ */
    console.log("üßæ –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —É –ë–î‚Ä¶");
    const [rows] = await sequelize.query(
      `INSERT INTO applications 
       (user_id, title, content, idea_id, type, status, created_at, updated_at)
       VALUES (:user_id, :title, :content, :idea_id, :type, 'draft', NOW(), NOW())
       RETURNING *`,
      { replacements: { user_id, title, content, idea_id, type }, type: QueryTypes.INSERT }
    );

    const newApplication = rows?.[0];
    console.log("‚úÖ –ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ:", newApplication);

    if (!newApplication) {
      console.error("‚ùå INSERT –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤");
      return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏." });
    }

    /* 1-E. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —ñ–¥–µ—ó */
    console.log("üîß –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–¥–µ—ó ‚Ä¶");
    await sequelize.query(
      `UPDATE ideas SET status = 'applied', updated_at = NOW() WHERE id = :idea_id`,
      { replacements: { idea_id }, type: QueryTypes.UPDATE }
    );
    console.log("üü¢ –°—Ç–∞—Ç—É—Å —ñ–¥–µ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ");

    /* 1-F. WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */
    try {
      console.log("üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é WS ‚Ä¶");
      io.emit("application_created", { idea_id, user_id, title, type });
      console.log("üì° –ü–æ–¥—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
    } catch (wsErr) {
      console.warn("‚ö†Ô∏è WS –ø–æ–º–∏–ª–∫–∞:", wsErr.message);
    }

    console.log("üéâ –ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    res.status(201).json(newApplication);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ createApplication:", err);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫                  */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const getAllApplications = async (req, res) => {
  console.group("üìÑ  getAllApplications");
  try {
    const applications = await sequelize.query(
      `SELECT a.*, u.first_name, u.last_name
       FROM applications a
       LEFT JOIN users u ON a.user_id = u.id
       ORDER BY a.created_at DESC`,
      { type: QueryTypes.SELECT }
    );
    console.log("üî¢ –†—è–¥–∫—ñ–≤:", applications.length);
    res.json(applications);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getAllApplications:", err);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –∑–∞—è–≤–∫–∏                */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const getApplicationById = async (req, res) => {
  console.group("üîç  getApplicationById");
  try {
    const { id } = req.params;
    console.log("ID =", id);

    const [app] = await sequelize.query(
      `SELECT a.*, u.first_name, u.last_name
       FROM applications a
       LEFT JOIN users u ON a.user_id = u.id
       WHERE a.id = :id`,
      { replacements: { id }, type: QueryTypes.SELECT }
    );

    if (!app) {
      console.warn("üö´ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }
    res.json(app);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getApplicationById:", err);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫—É" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏                       */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const updateApplication = async (req, res) => {
  console.group("‚úèÔ∏è  updateApplication");
  try {
    const { id } = req.params;
    const { title, content, status } = req.body;
    console.log("‚û°Ô∏è", { id, title, content, status });

    const [updated] = await sequelize.query(
      `UPDATE applications
       SET title = :title, content = :content, status = :status, updated_at = NOW()
       WHERE id = :id RETURNING *`,
      { replacements: { title, content, status, id }, type: QueryTypes.UPDATE }
    );

    if (!updated) {
      console.warn("üö´ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è update");
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    console.log("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ:", updated);
    res.json({ message: "–ó–∞—è–≤–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ updateApplication:", err);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 5. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏                       */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const deleteApplication = async (req, res) => {
  console.group("üóëÔ∏è  deleteApplication");
  try {
    const { id } = req.params;
    console.log("ID =", id);

    const [deleted] = await sequelize.query(
      `DELETE FROM applications WHERE id = :id RETURNING *`,
      { replacements: { id }, type: QueryTypes.DELETE }
    );

    if (!deleted) {
      console.warn("üö´ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è delete");
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    console.log("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ:", deleted);
    res.json({ message: "–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ deleteApplication:", err);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Ä—ñ—à–µ–Ω–Ω—è–º –∂—É—Ä—ñ         */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const updateApplicationByJury = async (req, res) => {
  console.group("üèÜ  updateApplicationByJury");
  try {
    const { id } = req.params;
    const { jury_comment, decision_type, postpone, review_comment } = req.body;
    console.log("‚û°Ô∏è", { id, jury_comment, decision_type, postpone, review_comment });

    if (!jury_comment || !decision_type) {
      console.warn("‚ö†Ô∏è –ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∂—É—Ä—ñ");
      return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –∂—É—Ä—ñ —Ç–∞ —Ç–∏–ø —Ä—ñ—à–µ–Ω–Ω—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    let postponedDate = null;
    if (postpone) {
      postponedDate = new Date();
      postponedDate.setMonth(postponedDate.getMonth() + 7);
    }

    const [updated] = await sequelize.query(
      `UPDATE applications 
       SET jury_comment = :jury_comment, decision_type = :decision_type, review_comment = :review_comment,
           updated_at = NOW(), status = CASE
             WHEN :postponedDate IS NOT NULL THEN 'postponed'
             ELSE 'reviewed'
           END, locked_by = NULL
       WHERE id = :id RETURNING *`,
      {
        replacements: { jury_comment, decision_type, review_comment, postponedDate, id },
        type: QueryTypes.UPDATE,
      }
    );

    if (!updated) {
      console.warn("üö´ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è updateByJury");
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    console.log("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—ñ—à–µ–Ω–Ω—è–º –∂—É—Ä—ñ:", updated);
    res.json({ message: "–†—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ updateApplicationByJury:", err);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  } finally {
    console.groupEnd();
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
module.exports = {
  createApplication,
  getAllApplications,
  getApplicationById,
  updateApplication,
  deleteApplication,
  updateApplicationByJury,
};
