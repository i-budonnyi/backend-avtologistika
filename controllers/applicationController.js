const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");
const jwt = require("jsonwebtoken");
const { io } = require("../index"); // üì° WebSocket

// üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—è —Ç–∞ –∑–º—ñ–Ω–æ—é —Å—Ç–∞—Ç—É—Å—É —ñ–¥–µ—ó
// üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—è —Ç–∞ –∑–º—ñ–Ω–æ—é —Å—Ç–∞—Ç—É—Å—É —ñ–¥–µ—ó
const createApplication = async (req, res) => {
  try {
    const { user_id, title, content, idea_id, type } = req.body;

    if (!user_id || !title || !content || !idea_id || !type) {
      return res.status(400).json({ message: "–ù–µ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!" });
    }

    const allowedTypes = ["idea", "problem"];
    if (!allowedTypes.includes(type)) {
      return res.status(400).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –∑–∞—è–≤–∫–∏!" });
    }

    const existing = await sequelize.query(
      `SELECT id FROM applications WHERE user_id = :user_id AND idea_id = :idea_id`,
      {
        replacements: { user_id, idea_id },
        type: QueryTypes.SELECT,
      }
    );

    if (existing.length > 0) {
      return res.status(409).json({ message: "–ó–∞—è–≤–∫—É –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ü—ñ—î—ó —ñ–¥–µ—ó." });
    }

    const result = await sequelize.query(
      `INSERT INTO applications (user_id, title, content, idea_id, type, status, created_at, updated_at)
       VALUES (:user_id, :title, :content, :idea_id, :type, 'draft', NOW(), NOW()) RETURNING *`,
      {
        replacements: { user_id, title, content, idea_id, type },
        type: QueryTypes.INSERT,
      }
    );

    const newApplication = Array.isArray(result) && Array.isArray(result[0]) ? result[0][0] : result[0];

    await sequelize.query(
      `UPDATE ideas SET status = 'applied', updated_at = NOW() WHERE id = :idea_id`,
      {
        replacements: { idea_id },
        type: QueryTypes.UPDATE,
      }
    );

    io.emit("application_created", {
      idea_id,
      user_id,
      title,
      type,
    });

    res.status(201).json(newApplication);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};


// üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫ —ñ–∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
const getAllApplications = async (req, res) => {
  try {
    const applications = await sequelize.query(
      `SELECT a.*, u.first_name, u.last_name 
       FROM applications a
       LEFT JOIN users u ON a.user_id = u.id
       ORDER BY a.created_at DESC`,
      {
        type: QueryTypes.SELECT,
      }
    );
    res.json(applications);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏" });
  }
};

// üìÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∑–∞ ID
const getApplicationById = async (req, res) => {
  try {
    const { id } = req.params;

    const application = await sequelize.query(
      `SELECT a.*, u.first_name, u.last_name 
       FROM applications a
       LEFT JOIN users u ON a.user_id = u.id
       WHERE a.id = :id`,
      {
        replacements: { id },
        type: QueryTypes.SELECT,
      }
    );

    if (!application.length) {
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(application[0]);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—è–≤–∫—É" });
  }
};

// ‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
const updateApplication = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, status } = req.body;

    const [updated] = await sequelize.query(
      `UPDATE applications 
       SET title = :title, content = :content, status = :status, updated_at = NOW()
       WHERE id = :id RETURNING *`,
      {
        replacements: { title, content, status, id },
        type: QueryTypes.UPDATE,
      }
    );

    if (!updated) {
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json({ message: "–ó–∞—è–≤–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  }
};

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
const deleteApplication = async (req, res) => {
  try {
    const { id } = req.params;

    const deleted = await sequelize.query(
      `DELETE FROM applications WHERE id = :id RETURNING *`,
      {
        replacements: { id },
        type: QueryTypes.DELETE,
      }
    );

    if (!deleted) {
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json({ message: "–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  }
};

// üß† –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Ä—ñ—à–µ–Ω–Ω—è–º –∂—É—Ä—ñ
const updateApplicationByJury = async (req, res) => {
  try {
    const { id } = req.params;
    const { jury_comment, decision_type, postpone, review_comment } = req.body;

    if (!jury_comment || !decision_type) {
      return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –∂—É—Ä—ñ —Ç–∞ —Ç–∏–ø —Ä—ñ—à–µ–Ω–Ω—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    let postponedDate = null;
    if (postpone) {
      postponedDate = new Date();
      postponedDate.setMonth(postponedDate.getMonth() + 7);
    }

    const [updated] = await sequelize.query(
      `UPDATE applications 
       SET jury_comment = :jury_comment, decision_type = :decision_type, review_comment = :review_comment, 
           updated_at = NOW(), status = CASE 
             WHEN :postponedDate IS NOT NULL THEN 'postponed' 
             ELSE 'reviewed' 
           END, locked_by = NULL 
       WHERE id = :id RETURNING *`,
      {
        replacements: { jury_comment, decision_type, review_comment, postponedDate, id },
        type: QueryTypes.UPDATE,
      }
    );

    if (!updated) {
      return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json({ message: "–†—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∂—É—Ä—ñ:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É" });
  }
};

module.exports = {
  createApplication,
  getAllApplications,
  getApplicationById,
  updateApplication,
  deleteApplication,
  updateApplicationByJury,
};
