const jwt = require("jsonwebtoken");
const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// üßæ –õ–æ–≥—É–≤–∞–Ω–Ω—è
const logRequest = (req) => {
  console.log(`\n--- üì° [INCOMING REQUEST] ${req.method} ${req.originalUrl} ---`);
  console.log("üåê IP:", req.ip);
  console.log("üì• Headers:", req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log("üì¶ Body:", req.body);
  }
};

// ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
const authenticateToken = (req, res, next) => {
  logRequest(req);
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" });
  }

  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
const getLoggedAmbassador = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" });

    const [ambassador] = await sequelize.query(
      `SELECT id, phone, position, email, first_name, last_name, user_id
       FROM ambassadors WHERE user_id = :userId LIMIT 1`,
      { replacements: { userId }, type: QueryTypes.SELECT }
    );

    if (!ambassador) return res.status(404).json({ message: "–ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(ambassador);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞", error: error.message });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞ –∑–∞ ID
const getAmbassadorById = async (req, res) => {
  logRequest(req);
  try {
    const { id } = req.params;
    if (!id || isNaN(id)) {
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞." });
    }

    const [ambassador] = await sequelize.query(
      `SELECT id, phone, email, first_name, last_name, user_id 
       FROM ambassadors WHERE id = :id LIMIT 1`,
      { replacements: { id }, type: QueryTypes.SELECT }
    );

    if (!ambassador) {
      return res.status(404).json({ message: "–ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    res.json(ambassador);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞", error: error.message });
  }
};

// ‚úÖ –í—Å—ñ –∞–º–±–∞—Å–∞–¥–æ—Ä–∏
const getAllAmbassadors = async (req, res) => {
  logRequest(req);
  try {
    const ambassadors = await sequelize.query(
      `SELECT id, phone, position, email, first_name, last_name FROM ambassadors`,
      { type: QueryTypes.SELECT }
    );
    res.json(ambassadors);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤", error: error.message });
  }
};

// ‚úÖ –Ü–¥–µ—ó, —è–∫—ñ –æ–±—Ä–∞–ª–∏ —Ü—å–æ–≥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
const getIdeasForAmbassador = async (req, res) => {
  logRequest(req);
  try {
    const userId = req.params.id;
    if (!userId || isNaN(userId)) {
      return res.status(400).json({ message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π" });
    }

    const [ambassador] = await sequelize.query(
      `SELECT id FROM ambassadors WHERE user_id = :userId LIMIT 1`,
      { replacements: { userId }, type: QueryTypes.SELECT }
    );

    if (!ambassador) {
      return res.status(404).json({ message: "–ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞." });
    }

    const ideas = await sequelize.query(
      `SELECT i.id, i.title, i.description, i.status, i.user_id,
              u.first_name AS sender_first_name,
              u.last_name AS sender_last_name,
              u.email AS sender_email
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       WHERE i.ambassador_id = :ambassadorId
       ORDER BY i.id DESC`,
      { replacements: { ambassadorId: ambassador.id }, type: QueryTypes.SELECT }
    );

    res.json(ideas);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —ñ–¥–µ—ó
const updateIdeaStatus = async (req, res) => {
  logRequest(req);
  try {
    const { idea_id, new_status } = req.body;
    const userId = req.user?.id;

    if (!idea_id || !new_status) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ idea_id —ñ new_status" });
    }

    const [ambassador] = await sequelize.query(
      `SELECT id FROM ambassadors WHERE user_id = :userId LIMIT 1`,
      { replacements: { userId }, type: QueryTypes.SELECT }
    );

    if (!ambassador) {
      return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ‚Äî –Ω–µ –∞–º–±–∞—Å–∞–¥–æ—Ä" });
    }

    const result = await sequelize.query(
      `UPDATE ideas SET status = :new_status WHERE id = :idea_id AND ambassador_id = :ambassadorId RETURNING *`,
      {
        replacements: {
          idea_id,
          new_status,
          ambassadorId: ambassador.id,
        },
        type: QueryTypes.UPDATE,
      }
    );

    if (!result[1]?.length) {
      return res.status(404).json({ message: "–Ü–¥–µ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –∞–º–±–∞—Å–∞–¥–æ—Ä—É." });
    }

    res.json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", updated: result[1][0] });
  } catch (error) {
    console.error("‚ùå [updateIdeaStatus] error:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É", error: error.message });
  }
};

// ‚úÖ –ü–æ–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
module.exports = {
  authenticateToken,
  getLoggedAmbassador,
  getAmbassadorById,
  getAllAmbassadors,
  getIdeasForAmbassador,
  updateIdeaStatus,
};
