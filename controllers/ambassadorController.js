const jwt = require("jsonwebtoken");
const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
const logRequest = (req) => {
    console.log(`\n--- üì° [INCOMING REQUEST] ${req.method} ${req.originalUrl} ---`);
    console.log("üåê IP:", req.ip);
    console.log("üì• Headers:", req.headers);
    if (req.body && Object.keys(req.body).length > 0) {
        console.log("üì¶ Body:", req.body);
    }
};

/**
 * Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
 */
const authenticateToken = (req, res, next) => {
    logRequest(req);
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        console.warn("‚ùå [AUTH] –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω");
        return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" });
    }

    const token = authHeader.split(" ")[1];
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        console.log(`‚úÖ [AUTH] –¢–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, userId: ${decoded.id}`);
        next();
    } catch (error) {
        console.error("‚ùå [AUTH] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
        return res.status(403).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
 */
const getLoggedAmbassador = async (req, res) => {
    logRequest(req);
    try {
        if (!req.user || !req.user.id) {
            console.warn("‚ùå [getLoggedAmbassador] –¢–æ–∫–µ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å userId!");
            return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" });
        }

        const userId = req.user.id;
        console.log(`üõ† [getLoggedAmbassador] SQL-–∑–∞–ø–∏—Ç –¥–ª—è user_id=${userId}`);

        const ambassador = await sequelize.query(
            `SELECT id, phone, position, email, first_name, last_name, user_id
             FROM ambassadors WHERE user_id = :userId LIMIT 1`,
            { replacements: { userId }, type: QueryTypes.SELECT }
        );

        if (!ambassador.length) {
            console.warn(`‚ùå [getLoggedAmbassador] –ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ user_id=${userId}`);
            return res.status(404).json({ message: "–ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log("‚úÖ [getLoggedAmbassador] –ê–º–±–∞—Å–∞–¥–æ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:", ambassador[0]);
        res.status(200).json(ambassador[0]);
    } catch (error) {
        console.error("‚ùå [getLoggedAmbassador] –ü–æ–º–∏–ª–∫–∞:", error.message);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞", error: error.message });
    }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞ –∑–∞ ID
 */
const getAmbassadorById = async (req, res) => {
    logRequest(req);
    try {
        const { id } = req.params;

        if (!id || isNaN(id)) {
            console.warn("‚ùå [getAmbassadorById] –ù–µ–≤—ñ—Ä–Ω–∏–π ID:", id);
            return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞." });
        }

        console.log(`üõ† [getAmbassadorById] SQL-–∑–∞–ø–∏—Ç –Ω–∞ ID=${id}`);

        const ambassador = await sequelize.query(
            `SELECT id, phone, email, first_name, last_name, user_id 
             FROM ambassadors WHERE id = :id LIMIT 1`,
            { replacements: { id }, type: QueryTypes.SELECT }
        );

        if (!ambassador.length) {
            console.warn("‚ùå [getAmbassadorById] –ê–º–±–∞—Å–∞–¥–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
            return res.status(404).json({ message: "–ê–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        }

        console.log("‚úÖ [getAmbassadorById] –ê–º–±–∞—Å–∞–¥–æ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:", ambassador[0]);
        res.status(200).json(ambassador[0]);
    } catch (error) {
        console.error("‚ùå [getAmbassadorById] –ü–æ–º–∏–ª–∫–∞:", error.message);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞", error: error.message });
    }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤
 */
const getAllAmbassadors = async (req, res) => {
    logRequest(req);
    try {
        console.log("üîç [getAllAmbassadors] SQL-–∑–∞–ø–∏—Ç –Ω–∞ –≤—Å—ñ—Ö –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤");

        const ambassadors = await sequelize.query(
            `SELECT id, phone, position, email, first_name, last_name FROM ambassadors`,
            { type: QueryTypes.SELECT }
        );

        console.log(`‚úÖ [getAllAmbassadors] –û—Ç—Ä–∏–º–∞–Ω–æ ${ambassadors.length} –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤`);
        res.status(200).json(ambassadors);
    } catch (error) {
        console.error("‚ùå [getAllAmbassadors] –ü–æ–º–∏–ª–∫–∞:", error.message);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤", error: error.message });
    }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π –¥–ª—è –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
 */
const getIdeasForAmbassador = async (req, res) => {
    logRequest(req);
    try {
        const ambassadorId = req.params.id;
        if (!ambassadorId || isNaN(ambassadorId)) {
            console.warn("‚ùå [getIdeasForAmbassador] ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π");
            return res.status(400).json({ message: "ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π" });
        }

        console.log(`üõ† [getIdeasForAmbassador] SQL-–∑–∞–ø–∏—Ç –Ω–∞ —ñ–¥–µ—ó –¥–ª—è ID=${ambassadorId}`);

        const ideas = await sequelize.query(
            `SELECT i.id, i.title, i.description, i.status, 
                    u.first_name AS author_name, u.email AS author_email
             FROM ideas i
             JOIN users u ON i.user_id = u.id
             WHERE i.ambassador_id = :ambassadorId`,
            { replacements: { ambassadorId }, type: QueryTypes.SELECT }
        );

        console.log(`‚úÖ [getIdeasForAmbassador] –û—Ç—Ä–∏–º–∞–Ω–æ ${ideas.length} —ñ–¥–µ–π`);
        res.status(200).json(ideas); // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —ó—Ö 0 ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è []
    } catch (error) {
        console.error("‚ùå [getIdeasForAmbassador] –ü–æ–º–∏–ª–∫–∞:", error.message);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
    }
};

module.exports = {
    authenticateToken,
    getLoggedAmbassador,
    getAmbassadorById,
    getAllAmbassadors,
    getIdeasForAmbassador,
};
