const { QueryTypes } = require("sequelize");
const sequelize = require("../config/db");

const approvedProjectsController = {
  // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PM –∑–∞ –π–æ–≥–æ ID
  getProjectManagerById: async (req, res) => {
    try {
      console.log("üü¢ [getProjectManagerById] –í–∏–∫–ª–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞");
      console.log("üì• Headers:", req.headers);
      console.log("üì• req.user:", req.user);
      console.log("üì• req.params:", req.params);

      const { pmId } = req.params;

      if (!pmId) {
        console.warn("‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä pmId");
        return res.status(400).json({ message: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" });
      }

      console.log(`üîç –®—É–∫–∞—î–º–æ PM –∑ id = ${pmId}`);

      const result = await sequelize.query(
        `
        SELECT 
          pm.id AS pm_id, 
          pm.first_name, 
          pm.last_name, 
          pm.phone, 
          pm.email, 
          u.role
        FROM project_managers pm
        LEFT JOIN users u ON pm.id = u.id
        WHERE pm.id = :pmId;
        `,
        {
          replacements: { pmId },
          type: QueryTypes.SELECT
        }
      );

      console.log("üì¶ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result);

      if (!result || result.length === 0) {
        console.warn(`‚ùóÔ∏èPM –∑ id ${pmId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        return res.status(404).json({ message: "–ü—Ä–æ—î–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      }

      console.log("‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ PM:", result[0]);
      return res.status(200).json(result[0]);
    } catch (error) {
      console.error("‚ùå [getProjectManagerById] –ü–æ–º–∏–ª–∫–∞:", error);
      return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö", error: error.message });
    }
  },

  // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ
  getFinalJuryDecisions: async (req, res) => {
    try {
      console.log("üü¢ [getFinalJuryDecisions] –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ...");
      console.log("üì• Headers:", req.headers);
      console.log("üì• req.user:", req.user);

      const decisions = await sequelize.query(
        `
        SELECT 
          fjd.project_id, 
          u.first_name AS author_first_name,
          u.last_name AS author_last_name,
          jm.first_name AS jury_first_name,
          jm.last_name AS jury_last_name,
          fjd.decision_text,
          fjd.final_decision,
          fjd.decision_date
        FROM final_jury_decisions fjd
        LEFT JOIN users u ON fjd.user_id = u.id
        LEFT JOIN jury_members jm ON fjd.jury_member_id = jm.id
        ORDER BY fjd.decision_date DESC;
        `,
        { type: QueryTypes.SELECT }
      );

      console.log("üì¶ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—ñ—à–µ–Ω—å:", decisions);

      if (!decisions || decisions.length === 0) {
        console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —É —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω–Ω—è—Ö");
        return res.status(404).json({ message: "–ù–µ–º–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –∂—É—Ä—ñ" });
      }

      console.log(`‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ${decisions.length} —Ä—ñ—à–µ–Ω—å`);
      return res.status(200).json(decisions);
    } catch (error) {
      console.error("‚ùå [getFinalJuryDecisions] –ü–æ–º–∏–ª–∫–∞:", error);
      return res.status(500).json({
        message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ.",
        error: error.message
      });
    }
  }
};

module.exports = approvedProjectsController;
