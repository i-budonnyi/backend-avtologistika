const { QueryTypes } = require("sequelize");
const sequelize = require("../config/db"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

const approvedProjectsController = {
    // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PM –∑–∞ –π–æ–≥–æ ID
    getProjectManagerById: async (req, res) => {
        try {
            const { pmId } = req.params; // –û—Ç—Ä–∏–º—É—î–º–æ ID PM –∑ URL

            const result = await sequelize.query(
                `SELECT 
                    pm.id AS pm_id, 
                    pm.first_name, 
                    pm.last_name, 
                    pm.phone, 
                    pm.email, 
                    u.role
                FROM project_managers pm
                LEFT JOIN users u ON pm.id = u.id
                WHERE pm.id = :pmId;`,
                {
                    replacements: { pmId }, // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ SQL-—ñ–Ω'—î–∫—Ü—ñ–π
                    type: QueryTypes.SELECT
                }
            );

            if (result.length === 0) {
                return res.status(404).json({ message: "–ü—Ä–æ—î–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            }

            res.status(200).json(result[0]);
        } catch (error) {
            console.error("[getProjectManagerById] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è PM –∑–∞ ID:", error);
            res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö" });
        }
    },

    // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ
    getFinalJuryDecisions: async (req, res) => {
        try {
            console.log("üìå –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ...");

            const decisions = await sequelize.query(
                `SELECT 
                    fjd.project_id, 
                    u.first_name AS author_first_name,
                    u.last_name AS author_last_name,
                    jm.first_name AS jury_first_name,
                    jm.last_name AS jury_last_name,
                    fjd.decision_text,
                    fjd.final_decision,
                    fjd.decision_date
                FROM final_jury_decisions fjd
                LEFT JOIN users u ON fjd.user_id = u.id
                LEFT JOIN jury_members jm ON fjd.jury_member_id = jm.id
                ORDER BY fjd.decision_date DESC;`,
                { type: QueryTypes.SELECT }
            );

            if (decisions.length === 0) {
                return res.status(404).json({ message: "–ù–µ–º–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –∂—É—Ä—ñ" });
            }

            res.status(200).json(decisions);
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –∂—É—Ä—ñ:", error);
            res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ." });
        }
    }
};

// üìå –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
module.exports = approvedProjectsController;
