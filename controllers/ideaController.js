const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —ñ–¥–µ—ó
const getAllIdeas = async (req, res) => {
  try {
    const ideas = await sequelize.query(
      `SELECT i.*, u.first_name AS author_first_name, u.last_name AS author_last_name
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       ORDER BY i.created_at DESC`,
      { type: QueryTypes.SELECT }
    );
    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getAllIdeas] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —ñ–¥–µ—é (—á–µ—Ä–µ–∑ JWT)
const createIdea = async (req, res) => {
  const { ambassador_id, title, description } = req.body;
  const user_id = req.user?.id;

  if (!title || !description || !ambassador_id || !user_id) {
    return res.status(400).json({ message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
  }

  console.log("üìù createIdea ->", { user_id, ambassador_id, title, description });

  try {
    await sequelize.query(
      `INSERT INTO ideas (user_id, ambassador_id, title, description, status, created_at, updated_at)
       VALUES (:user_id, :ambassador_id, :title, :description, 'pending', NOW(), NOW())`,
      {
        replacements: { user_id, ambassador_id, title, description },
        type: QueryTypes.INSERT
      }
    );

    res.status(201).json({ message: "–Ü–¥–µ—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞" });
  } catch (error) {
    console.error("[createIdea] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–¥–µ—ó", error: error.message });
  }
};

// ‚úÖ –Ü–¥–µ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserIdeas = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞" });

    const ideas = await sequelize.query(
      "SELECT * FROM ideas WHERE user_id = :userId ORDER BY created_at DESC",
      { replacements: { userId }, type: QueryTypes.SELECT }
    );
    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getUserIdeas] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –Ü–¥–µ—ó –ø–µ–≤–Ω–æ–≥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
const getIdeasByAmbassador = async (req, res) => {
  const { ambassadorId } = req.params;
  if (!ambassadorId) return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞" });

  try {
    const ideas = await sequelize.query(
      `SELECT i.*, u.first_name AS author_first_name, u.last_name AS author_last_name
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       WHERE i.ambassador_id = :ambassadorId
       ORDER BY i.created_at DESC`,
      {
        replacements: { ambassadorId },
        type: QueryTypes.SELECT
      }
    );
    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getIdeasByAmbassador] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —ñ–¥–µ—ó
const updateIdeaStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  if (!id || !status) return res.status(400).json({ message: "ID —ñ —Å—Ç–∞—Ç—É—Å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });

  try {
    await sequelize.query(
      `UPDATE ideas SET status = :status, updated_at = NOW() WHERE id = :id`,
      { replacements: { status, id }, type: QueryTypes.UPDATE }
    );
    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("[updateIdeaStatus] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É", error: error.message });
  }
};

// ‚úÖ –°–ø–∏—Å–æ–∫ –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤
const getAllAmbassadors = async (req, res) => {
  try {
    const data = await sequelize.query(
      "SELECT id, first_name, last_name, email FROM users WHERE role = 'ambassador'",
      { type: QueryTypes.SELECT }
    );
    res.status(200).json(data);
  } catch (error) {
    console.error("[getAllAmbassadors] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤", error });
  }
};

module.exports = {
  getAllIdeas,
  createIdea,
  getUserIdeas,
  updateIdeaStatus,
  getIdeasByAmbassador,
  getAllAmbassadors
};
