const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// üîê Middleware –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞\const authenticateUser = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    console.error("‚ùå [AUTH] –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.");
    return res.status(401).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è" });
  }

  const token = authHeader.split(" ")[1];

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    if (!decoded.id) {
      console.error("‚ùå [AUTH] –¢–æ–∫–µ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å ID.");
      return res.status(401).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
    req.user = decoded;
    console.log(`‚úÖ [AUTH] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ user_id=${decoded.id}`);
    next();
  } catch (err) {
    console.error("‚ùå [AUTH] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", err.message);
    return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —ñ–¥–µ—ó (–∑ —ñ–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä—ñ–≤)
const getAllIdeas = async (req, res) => {
  try {
    console.log("[getAllIdeas] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —ñ–¥–µ–π –∑ –∞–≤—Ç–æ—Ä–∞–º–∏...");
    const ideas = await sequelize.query(`
      SELECT i.*, 
             u.first_name AS author_first_name, 
             u.last_name AS author_last_name
      FROM ideas i
      LEFT JOIN users u ON i.user_id = u.id
      ORDER BY i.created_at DESC
    `, {
      type: QueryTypes.SELECT,
    });

    console.log(`[getAllIdeas] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${ideas.length} —ñ–¥–µ–π.`);
    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getAllIdeas] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–¥–µ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserIdeas = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞" });

    console.log(`[getUserIdeas] üîç –Ü–¥–µ—ó –¥–ª—è user_id=${userId}`);
    const ideas = await sequelize.query(
      `SELECT * FROM ideas WHERE user_id = :userId ORDER BY created_at DESC`,
      { replacements: { userId }, type: QueryTypes.SELECT }
    );
    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getUserIdeas] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –Ü–¥–µ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞
const getIdeasByAmbassador = async (req, res) => {
  try {
    const { ambassadorId } = req.params;
    if (!ambassadorId) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞." });
    }

    console.log(`[getIdeasByAmbassador] üîç ID –∞–º–±–∞—Å–∞–¥–æ—Ä–∞ = ${ambassadorId}`);
    const ideas = await sequelize.query(
      `SELECT i.*, u.first_name AS author_first_name, u.last_name AS author_last_name
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       WHERE i.ambassador_id = :ambassadorId
       ORDER BY i.created_at DESC`,
      { replacements: { ambassadorId }, type: QueryTypes.SELECT }
    );

    res.status(200).json(ideas);
  } catch (error) {
    console.error("[getIdeasByAmbassador] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π", error: error.message });
  }
};

// ‚úÖ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —ñ–¥–µ—ó
const addCommentToIdea = async (req, res) => {
  try {
    const { id } = req.params;
    const { comment } = req.body;
    const userId = req.user?.id;

    if (!comment?.trim()) {
      return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º." });
    }

    console.log(`[addCommentToIdea] üí¨ –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —ñ–¥–µ—ó ID=${id}`);
    await sequelize.query(
      `INSERT INTO comments (idea_id, user_id, comment_text) VALUES (:id, :userId, :comment)`,
      { replacements: { id, userId, comment }, type: QueryTypes.INSERT }
    );

    res.status(201).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ" });
  } catch (error) {
    console.error("[addCommentToIdea] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è", error: error.message });
  }
};

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —ñ–¥–µ—é
const createIdea = async (req, res) => {
  try {
    const { ambassador_id, title, description } = req.body;
    const user_id = req.user?.id;

    console.log(`[createIdea] üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–¥–µ—ó –≤—ñ–¥ user_id=${user_id}`);
    await sequelize.query(
      `INSERT INTO ideas (user_id, ambassador_id, title, description, status)
       VALUES (:user_id, :ambassador_id, :title, :description, 'pending')`,
      { replacements: { user_id, ambassador_id, title, description }, type: QueryTypes.INSERT }
    );

    res.status(201).json({ message: "–Ü–¥–µ—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞" });
  } catch (error) {
    console.error("[createIdea] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–¥–µ—ó", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
const updateIdeaStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!id || !status) {
      return res.status(400).json({ message: "ID —ñ —Å—Ç–∞—Ç—É—Å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ." });
    }

    console.log(`[updateIdeaStatus] üõ† –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É —ñ–¥–µ—ó ID=${id} -> ${status}`);
    await sequelize.query(
      `UPDATE ideas SET status = :status WHERE id = :id`,
      { replacements: { status, id }, type: QueryTypes.UPDATE }
    );

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å —ñ–¥–µ—ó —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ." });
  } catch (error) {
    console.error("[updateIdeaStatus] ‚ùå", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É", error: error.message });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤
const getAllAmbassadors = async (req, res) => {
  try {
    console.log("[getAllAmbassadors] üîç –ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—ñ—Ö –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤...");
    const ambassadors = await sequelize.query(
      `SELECT id, first_name, last_name, email FROM users WHERE role = 'ambassador'`,
      { type: QueryTypes.SELECT }
    );
    console.log(`[getAllAmbassadors] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${ambassadors.length} –∑–∞–ø–∏—Å—ñ–≤.`);
    res.status(200).json(ambassadors);
  } catch (error) {
    console.error("[getAllAmbassadors] ‚ùå", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–º–±–∞—Å–∞–¥–æ—Ä—ñ–≤", error: error.message });
  }
};

module.exports = {
  authenticateUser,
  getAllIdeas,
  getUserIdeas,
  getIdeasByAmbassador,
  addCommentToIdea,
  createIdea,
  updateIdeaStatus,
  getAllAmbassadors,
};
