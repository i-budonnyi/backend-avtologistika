const { QueryTypes } = require("sequelize");
const sequelize = require("../config/db"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∑–∞ ID
const getSecretaryById = async (req, res) => {
    try {
        const secretaryId = parseInt(req.params.id, 10);

        if (isNaN(secretaryId)) {
            console.warn("[getSecretaryById] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–µ–∫—Ä–µ—Ç–∞—Ä—è");
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–µ–∫—Ä–µ—Ç–∞—Ä—è" });
        }

        console.log(`[getSecretaryById] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è ID=${secretaryId}`);

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        const secretary = await sequelize.query(
            `SELECT id, phone, email, first_name, last_name, user_id, role
             FROM secretaries WHERE id = :secretaryId LIMIT 1`,
            {
                replacements: { secretaryId },
                type: QueryTypes.SELECT,
            }
        );

        if (!secretary.length) {
            console.warn(`[getSecretaryById] ‚ùå –°–µ–∫—Ä–µ—Ç–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID=${secretaryId}`);
            return res.status(404).json({ message: "–°–µ–∫—Ä–µ—Ç–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log("[getSecretaryById] ‚úÖ –°–µ–∫—Ä–µ—Ç–∞—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:", secretary[0]);
        res.status(200).json(secretary[0]);
    } catch (error) {
        console.error("[getSecretaryById] ‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è", error: error.message });
    }
};


// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤
const getAllSecretaries = async (req, res) => {
    try {
        console.log("[getAllSecretaries] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤");

        const secretaries = await sequelize.query(
            `SELECT id, phone, email, first_name, last_name, role FROM secretaries`,
            { type: QueryTypes.SELECT }
        );

        if (!secretaries.length) {
            console.warn("[getAllSecretaries] ‚ö†Ô∏è –ù–µ–º–∞—î —Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤ —É –ë–î");
            return res.status(200).json({ message: "–°–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log(`[getAllSecretaries] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${secretaries.length} —Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤.`);
        res.status(200).json(secretaries);
    } catch (error) {
        console.error("[getAllSecretaries] ‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤", error: error.message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
const fetchApplicationsBySecretary = async (req, res) => {
    try {
        const secretaryId = parseInt(req.params.id, 10);

        if (isNaN(secretaryId)) {
            console.warn("[fetchApplicationsBySecretary] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–µ–∫—Ä–µ—Ç–∞—Ä—è");
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–µ–∫—Ä–µ—Ç–∞—Ä—è" });
        }

        console.log(`[fetchApplicationsBySecretary] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è ID=${secretaryId}`);

        const applications = await sequelize.query(
            `SELECT id, title, description, status, created_at 
             FROM applications WHERE jury_secretary_id = :secretaryId`,
            {
                replacements: { secretaryId },
                type: QueryTypes.SELECT,
            }
        );

        if (!applications.length) {
            console.warn(`[fetchApplicationsBySecretary] ‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è ID=${secretaryId}`);
            return res.status(200).json({ message: "–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫" });
        }

        console.log(`[fetchApplicationsBySecretary] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫.`);
        res.status(200).json(applications);
    } catch (error) {
        console.error("[fetchApplicationsBySecretary] ‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫", error: error.message });
    }
};

// ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
module.exports = {
    getSecretaryById,
    getAllSecretaries,
    fetchApplicationsBySecretary
};
