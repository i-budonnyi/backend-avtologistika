/* controllers/notificationController.js */
const { QueryTypes } = require("sequelize");
const sequelize     = require("../config/db"); // –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Å–∞–º–µ —Ç—É—Ç —É —Ç–µ–±–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π Sequelize

/**
 * GET /api/notifications/:user_id
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
 * + –≥–ª–æ–±–∞–ª—å–Ω—ñ (`target = 'all'`).
 */
exports.getByUser = async (req, res) => {
  /* 1. –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ user_id */
  const rawId  = req.params.user_id;          // —Ç–µ, —â–æ –ø—Ä–∏–π—à–ª–æ –≤ URL
  const userId = Number(rawId);               // –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —á–∏—Å–ª–∞

  if (!userId || Number.isNaN(userId)) {
    return res.status(400).json({ message: "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
  }

  /* 2. –î—ñ—Å—Ç–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è */
  try {
    const notifications = await sequelize.query(
      `
        SELECT *
        FROM notifications
        WHERE user_id = :uid
           OR target   = 'all'
        ORDER BY created_at DESC
      `,
      {
        replacements: { uid: userId },
        type: QueryTypes.SELECT
      }
    );

    return res.status(200).json(notifications);
  } catch (err) {
    /* 3. –õ–æ–≥—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É */
    console.error("üõë [getByUser] DB error:", err);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å" });
  }
};
