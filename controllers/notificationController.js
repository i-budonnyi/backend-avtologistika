const pool = require("../config/db");

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  try {
    const { user_id, message } = req.body;

    if (!user_id || !message) {
      return res.status(400).json({ message: "user_id —Ç–∞ message —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º–∏." });
    }

    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );

    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error("‚ùå createNotification:", error.message);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserNotifications = async (req, res) => {
  try {
    const { userId } = req.params;

    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå getUserNotifications:", error.message);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ")
const updateNotificationStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!status) {
      return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
    }

    await pool.query(`UPDATE notifications SET status = $1 WHERE id = $2`, [status, id]);

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.", id, status });
  } catch (error) {
    console.error("‚ùå updateNotificationStatus:", error.message);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// üîî –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ (–æ–∫—Ä–µ–º–∞ –¥—ñ—è)
const markAsRead = async (req, res) => {
  try {
    const { id } = req.params;

    await pool.query(`UPDATE notifications SET is_read = true WHERE id = $1`, [id]);

    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå markAsRead:", error.message);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ)
const addCommentToNotification = async (req, res) => {
  try {
    const { id } = req.params;
    const { comment } = req.body;

    if (!comment) {
      return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
    }

    await pool.query(`UPDATE notifications SET comment = $1 WHERE id = $2`, [comment, id]);

    res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ.", id, comment });
  } catch (error) {
    console.error("‚ùå addCommentToNotification:", error.message);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  try {
    const { userId } = req.params;

    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);

    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå deleteAllNotifications:", error.message);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏", error: error.message });
  }
};

module.exports = {
  createNotification,
  getUserNotifications,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
