const pool = require("../config/db");

// üîê –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ JWT, body, query –∞–±–æ params
const extractUserId = (req) => {
  const fromToken = req.user?.id;
  const fromBody = req.body?.user_id;
  const fromQuery = req.query?.user_id;
  const fromParams = req.params?.id;

  const resolved = fromToken || fromBody || fromQuery || fromParams || null;

  console.log("üîç [extractUserId] –í–∏–ª—É—á–µ–Ω–Ω—è user_id:", {
    fromToken, fromBody, fromQuery, fromParams, resolved,
  });

  return resolved;
};

// üîî –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  const io = req.app.get("io");
  const { message, target = "user", user_id, idea_id, problem_id } = req.body;

  console.log("üì• [POST /notification] –ó–∞–ø–∏—Ç:", { target, message, user_id, idea_id, problem_id });

  if (!message) {
    return res.status(400).json({ message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ." });
  }

  try {
    if (target === "all") {
      const result = await pool.query(
        `INSERT INTO notifications (user_id, message, created_at) VALUES (NULL, $1, CURRENT_TIMESTAMP) RETURNING *`,
        [message]
      );
      io.emit("notification_all", result.rows[0]);
      return res.status(201).json(result.rows[0]);
    }

    if (target === "user" && user_id) {
      const result = await pool.query(
        `INSERT INTO notifications (user_id, message, created_at) VALUES ($1, $2, CURRENT_TIMESTAMP) RETURNING *`,
        [user_id, message]
      );
      io.emit(`notification_${user_id}`, result.rows[0]);
      return res.status(201).json(result.rows[0]);
    }

    if (target === "subscribers") {
      let subscribersQuery = "";
      let id = null;

      if (idea_id) {
        id = idea_id;
        subscribersQuery = `SELECT user_id FROM idea_subscriptions WHERE idea_id = $1`;
      } else if (problem_id) {
        id = problem_id;
        subscribersQuery = `SELECT user_id FROM problem_subscriptions WHERE problem_id = $1`;
      }

      if (!subscribersQuery || !id) {
        return res.status(400).json({ message: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ idea_id –∞–±–æ problem_id." });
      }

      const subRes = await pool.query(subscribersQuery, [id]);
      const subscribers = subRes.rows.map(r => r.user_id);
      const notifications = [];

      for (const uid of subscribers) {
        const result = await pool.query(
          `INSERT INTO notifications (user_id, message, created_at) VALUES ($1, $2, CURRENT_TIMESTAMP) RETURNING *`,
          [uid, message]
        );
        notifications.push(result.rows[0]);
        io.emit(`notification_${uid}`, result.rows[0]);
      }

      return res.status(201).json({ message: "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º", notifications });
    }

    return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –∞–±–æ user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });
  } catch (error) {
    console.error("‚ùå [CREATE] SQL-–ø–æ–º–∏–ª–∫–∞:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ", error: error.message });
  }
};

// üì© –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserNotifications = async (req, res) => {
  const userId = req.user?.id;

  console.log("üì• [GET /notification/me] ->", { userId, token: req.headers.authorization });

  if (!userId) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ (user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)." });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå [GET /notification/me] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ user_id (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
const getNotificationsByUserId = async (req, res) => {
  const { id } = req.params;
  if (!id) return res.status(400).json({ message: "user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö." });

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [id]
    );
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå [ADMIN GET] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ", error: error.message });
  }
};

// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  if (!status) return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });

  try {
    const result = await pool.query(
      `UPDATE notifications SET status = $1 WHERE id = $2 RETURNING *`,
      [status, id]
    );
    if (!result.rowCount) return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    return res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [STATUS] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

// ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await pool.query(
      `UPDATE notifications SET is_read = true WHERE id = $1 RETURNING *`,
      [id]
    );
    if (!result.rowCount) return res.status(404).json({ message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå [READ] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;
  if (!comment) return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });

  try {
    const result = await pool.query(
      `UPDATE notifications SET comment = $1 WHERE id = $2 RETURNING *`,
      [comment, id]
    );
    if (!result.rowCount) return res.status(404).json({ message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    return res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [COMMENT] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const deleteAllNotifications = async (req, res) => {
  const userId = extractUserId(req);
  if (!userId) return res.status(401).json({ message: "user_id –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –∞–±–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ." });

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå [DELETE] SQL:", error.message);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  getNotificationsByUserId,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
