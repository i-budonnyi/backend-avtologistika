const pool = require("../config/db");

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ WebSocket
const createNotification = async (req, res) => {
  const io = req.app.get("io");

  const user_id = req.user?.id || req.body.user_id;
  const message = req.body.message;

  console.log("üì• [POST /notification] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ‚Üí", {
    headers: req.headers,
    userFromToken: req.user,
    user_id,
    message,
  });

  if (!user_id || !message) {
    console.warn("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π user_id –∞–±–æ message.");
    return res.status(400).json({ message: "user_id —Ç–∞ message —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º–∏." });
  }

  try {
    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );

    const notification = result.rows[0];
    console.log("‚úÖ [POST /notification] –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ:", notification);

    io.emit(`notification_${user_id}`, notification);
    io.emit("notification_all", notification);

    res.status(201).json(notification);
  } catch (error) {
    console.error("‚ùå [POST /notification] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserNotifications = async (req, res) => {
  const userId = req.user?.id;

  console.log("üì• [GET /notification/me] –ó–∞–ø–∏—Ç —Å–ø–æ–≤—ñ—â–µ–Ω—å:", {
    headers: req.headers,
    userFromToken: req.user,
    userId,
  });

  if (!userId) {
    console.warn("‚ö†Ô∏è [GET /notification/me] –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.");
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á." });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå [GET /notification/me] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å.", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  console.log("üîÑ [PATCH /notification/:id/status] –ó–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", { id, status });

  if (!status) {
    return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET status = $1 WHERE id = $2 RETURNING *`,
      [status, id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [updateNotificationStatus] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.", error: error.message });
  }
};

// üîî –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;

  console.log("üìò [PATCH /notification/:id/read] –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ:", id);

  try {
    const result = await pool.query(
      `UPDATE notifications SET is_read = true WHERE id = $1 RETURNING *`,
      [id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå [markAsRead] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á–∏—Ç–∞–Ω–æ—Å—Ç—ñ.", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;

  console.log("üí¨ [PATCH /notification/:id/comment] –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä:", { id, comment });

  if (!comment) {
    return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET comment = $1 WHERE id = $2 RETURNING *`,
      [comment, id]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ.", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [addCommentToNotification] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è.", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  const userId = req.user?.id;

  console.log("üóë [DELETE /notification/me] –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userId);

  if (!userId) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á." });
  }

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå [deleteAllNotifications] SQL –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å.", error: error.message });
  }
};

module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
