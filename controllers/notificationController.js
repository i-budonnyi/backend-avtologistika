const pool = require("../config/db");

// üîê –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ JWT –∞–±–æ body
const extractUserId = (req) => {
  if (req.user?.id) return req.user.id;
  if (req.body?.user_id) return req.body.user_id;
  return null;
};

// ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  const io = req.app.get("io");
  const user_id = extractUserId(req);
  const { message } = req.body;

  console.log("üì• [POST /notification] –ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
  console.log("üßæ Headers:", req.headers);
  console.log("üë§ Payload:", req.user);
  console.log("üì¶ Body:", req.body);

  if (!user_id || !message) {
    console.warn("‚ö†Ô∏è –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤: user_id –∞–±–æ message");
    return res.status(400).json({ message: "–ü–æ—Ç—Ä—ñ–±–µ–Ω user_id —Ç–∞ message." });
  }

  try {
    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );

    const notification = result.rows[0];
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", notification);

    io.emit(`notification_${user_id}`, notification);
    io.emit("notification_all", notification);

    res.status(201).json(notification);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ SQL:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", error: error.message });
  }
};

// üì• –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (/me)
const getUserNotifications = async (req, res) => {
  const userId = req.user?.id;

  console.log("üì• [GET /notification/me] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
  console.log("üë§ Payload:", req.user);

  if (!userId) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π." });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${result.rowCount} —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å.", error: error.message });
  }
};

// üì© –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É /user/:id)
const getNotificationsByUserId = async (req, res) => {
  const { id } = req.params;

  console.log("üì• [GET /notification/user/:id] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞ user_id:", id);

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [id]
    );
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${result.rowCount} —Å–ø–æ–≤—ñ—â–µ–Ω—å`);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ user_id", error: error.message });
  }
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  console.log("üîÑ [PATCH /notification/:id/status] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É", { id, status });

  if (!status) return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });

  try {
    const result = await pool.query(
      `UPDATE notifications SET status = $1 WHERE id = $2 RETURNING *`,
      [status, id]
    );

    if (!result.rowCount) return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É", error: error.message });
  }
};

// ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;
  console.log("üìò [PATCH /notification/:id/read] –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ:", id);

  try {
    const result = await pool.query(
      `UPDATE notifications SET is_read = true WHERE id = $1 RETURNING *`,
      [id]
    );

    if (!result.rowCount) return res.status(404).json({ message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });

    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—á–∏—Ç–∞–Ω–æ—Å—Ç—ñ", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;

  console.log("üí¨ [PATCH /notification/:id/comment] –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", { id, comment });

  if (!comment) return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });

  try {
    const result = await pool.query(
      `UPDATE notifications SET comment = $1 WHERE id = $2 RETURNING *`,
      [comment, id]
    );

    if (!result.rowCount) return res.status(404).json({ message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });

    res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  const userId = req.user?.id;
  console.log("üóë [DELETE /notification/me] –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è:", userId);

  if (!userId) return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π." });

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å", error: error.message });
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  getNotificationsByUserId,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
