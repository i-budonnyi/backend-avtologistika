const pool = require("../config/db");

// üîê –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ JWT, body, query –∞–±–æ params
const extractUserId = (req) => {
  const fromToken = req.user?.id;
  const fromBody = req.body?.user_id;
  const fromQuery = req.query?.user_id;
  const fromParams = req.params?.id;

  const resolved = fromToken || fromBody || fromQuery || fromParams || null;

  console.log("üîç [extractUserId] –í–∏–ª—É—á–µ–Ω–Ω—è user_id:", {
    fromToken,
    fromBody,
    fromQuery,
    fromParams,
    resolved,
  });

  return resolved;
};

// üîî –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  const io = req.app.get("io");
  const user_id = extractUserId(req);
  const { message } = req.body;

  console.log("üì• [POST /notification] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è:", {
    headers: req.headers,
    body: req.body,
    userFromToken: req.user,
    resolvedUserId: user_id,
  });

  if (!user_id || !message) {
    return res.status(400).json({
      message: "‚ùó –ü–æ—Ç—Ä—ñ–±–µ–Ω user_id —Ç–∞ message.",
      debug: { user_id, message, user: req.user },
      fix: "–ü–µ—Ä–µ–¥–∞–π user_id —á–µ—Ä–µ–∑ JWT, body, query –∞–±–æ params.",
    });
  }

  try {
    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );

    const notification = result.rows[0];
    io.emit(`notification_${user_id}`, notification);
    io.emit("notification_all", notification);

    return res.status(201).json(notification);
  } catch (error) {
    console.error("‚ùå [CREATE] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ", error: error.message });
  }
};

// üì© –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserNotifications = async (req, res) => {
  const userId = extractUserId(req);

  console.log("üì• [GET /notification/me] –ó–∞–ø–∏—Ç:", {
    headers: req.headers,
    userFromToken: req.user,
    resolvedUserId: userId,
  });

  if (!userId) {
    return res.status(401).json({
      message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.",
      debug: { user: req.user },
      fix: "JWT –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ id –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ user_id –≤ query/body.",
    });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå [GET /notification/me] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ user_id (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
const getNotificationsByUserId = async (req, res) => {
  const { id } = req.params;

  console.log("üì• [GET /notification/user/:id] –ó–∞–ø–∏—Ç:", { id });

  if (!id) {
    return res.status(400).json({
      message: "user_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.",
      fix: "–ü–µ—Ä–µ–≤—ñ—Ä URL: /notification/user/:id",
    });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [id]
    );
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå [ADMIN] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ", error: error.message });
  }
};

// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  console.log("üîÑ [PATCH /notification/:id/status] –ó–∞–ø–∏—Ç:", { id, status });

  if (!status) {
    return res.status(400).json({
      message: "–°—Ç–∞—Ç—É—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.",
      fix: "–ù–∞–¥—ñ—à–ª–∏ status —É body (–Ω–∞–ø—Ä. { status: 'approved' })",
    });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET status = $1 WHERE id = $2 RETURNING *`,
      [status, id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [STATUS] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

// ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;

  console.log("üìò [PATCH /notification/:id/read] –ó–∞–ø–∏—Ç:", { id });

  try {
    const result = await pool.query(
      `UPDATE notifications SET is_read = true WHERE id = $1 RETURNING *`,
      [id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå [READ] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;

  console.log("üí¨ [PATCH /notification/:id/comment] –ó–∞–ø–∏—Ç:", { id, comment });

  if (!comment) {
    return res.status(400).json({
      message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.",
      fix: "–î–æ–¥–∞–π —É body: { comment: '...' }",
    });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET comment = $1 WHERE id = $2 RETURNING *`,
      [comment, id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå [COMMENT] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  const userId = extractUserId(req);

  console.log("üóë [DELETE /notification/me] –ó–∞–ø–∏—Ç:", {
    headers: req.headers,
    resolvedUserId: userId,
    userFromToken: req.user,
  });

  if (!userId) {
    return res.status(401).json({
      message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.",
      debug: { user: req.user },
      fix: "JWT –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ user_id –∞–±–æ –ø–µ—Ä–µ–¥–∞–π —è–≤–Ω–æ.",
    });
  }

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå [DELETE] SQL-–ø–æ–º–∏–ª–∫–∞:", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ", error: error.message });
  }
};

module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  getNotificationsByUserId,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
