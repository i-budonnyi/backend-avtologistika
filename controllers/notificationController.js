// controllers/notificationController.js

const { QueryTypes } = require("sequelize");
const sequelize      = require("../config/db");
const { io }         = require("../index"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ socket.io

// üì¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–∞–∑—ñ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
const createNotification = async ({ userId, message, target = null }) => {
  try {
    const [result] = await sequelize.query(
      `INSERT INTO notifications (user_id, message, target, created_at)
       VALUES (:userId, :message, :target, NOW())
       RETURNING *`,
      {
        replacements: { userId, message, target },
        type: QueryTypes.INSERT,
      }
    );

    const notification = result[0];
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", notification);

    // üîî –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
    if (target === "all") {
      io.emit("globalNotification", notification);
    } else {
      io.to(`${userId}`).emit("notification", notification);
    }
  } catch (err) {
    console.error("‚ùå createNotification error:", err.message);
  }
};

// üîç –ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–±–ª–æ–≥—ñ–≤, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —Ç–æ—â–æ)
const checkBlogActivityAndNotify = async () => {
  try {
    // üìù –ù–æ–≤—ñ –±–ª–æ–≥–∏
    const blogs = await sequelize.query(
      `SELECT b.id, b.title, b.author_id, u.first_name
       FROM blog b
       JOIN users u ON u.id = b.author_id
       WHERE b.created_at >= NOW() - INTERVAL '1 minute'`,
      { type: QueryTypes.SELECT }
    );

    for (const blog of blogs) {
      const message = `üÜï ${blog.first_name} —Å—Ç–≤–æ—Ä–∏–≤ –Ω–æ–≤–∏–π –±–ª–æ–≥: "${blog.title}"`;
      await createNotification({ userId: blog.author_id, message, target: "all" });
    }

    // üí¨ –ù–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    const comments = await sequelize.query(
      `SELECT c.id, c.user_id, u.first_name, c.content
       FROM comments c
       JOIN users u ON u.id = c.user_id
       WHERE c.created_at >= NOW() - INTERVAL '1 minute'`,
      { type: QueryTypes.SELECT }
    );

    for (const comment of comments) {
      const message = `üí¨ ${comment.first_name} –∑–∞–ª–∏—à–∏–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä: "${comment.content}"`;
      await createNotification({ userId: comment.user_id, message, target: "all" });
    }

    // üõ† –ú–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –Ω–∞ –ª–∞–π–∫–∏, –ø—ñ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–±–ª–µ–º–∏...

  } catch (err) {
    console.error("‚ùå checkBlogActivityAndNotify error:", err.message);
  }
};

// ‚è± –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
setInterval(checkBlogActivityAndNotify, 60_000);

module.exports = {
  createNotification,
  checkBlogActivityAndNotify,
};
