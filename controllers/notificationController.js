const pool = require("../config/db");

// üîê –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ JWT –∞–±–æ body
const extractUserId = (req) => {
  if (req.user?.id) return req.user.id;
  if (req.body?.user_id) return req.body.user_id;
  return null;
};

// ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  const io = req.app.get("io");
  const user_id = extractUserId(req);
  const { message } = req.body;

  if (!user_id || !message) {
    return res.status(400).json({ message: "–ü–æ—Ç—Ä—ñ–±–µ–Ω user_id —Ç–∞ message." });
  }

  try {
    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );
    const notification = result.rows[0];

    // üîî WebSocket
    io.emit(`notification_${user_id}`, notification);
    io.emit("notification_all", notification);

    return res.status(201).json(notification);
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (createNotification):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É userId (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
const getNotificationsByUserId = async (req, res) => {
  const { id } = req.params;

  if (!id) return res.status(400).json({ message: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ user_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö." });

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [id]
    );
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (getNotificationsByUserId):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ user_id", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (/notification/me)
const getUserNotifications = async (req, res) => {
  const userId = extractUserId(req);

  console.log("üîé [getUserNotifications] userId:", userId);

  if (!userId) {
    console.warn("‚õî [getUserNotifications] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.");
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π." });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    console.log("‚úÖ [getUserNotifications] –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ:", result.rows.length);
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (getUserNotifications):", error);
    return res.status(500).json({
      message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
      error: error.message,
    });
  }
};


// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å (–¥–æ–≤—ñ–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å)
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  if (!status) {
    return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET status = $1 WHERE id = $2 RETURNING *`,
      [status, id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (updateNotificationStatus):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É", error: error.message });
  }
};

// ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await pool.query(
      `UPDATE notifications SET is_read = true WHERE id = $1 RETURNING *`,
      [id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (markAsRead):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—á–∏—Ç–∞–Ω–æ—Å—Ç—ñ", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;

  if (!comment) {
    return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π." });
  }

  try {
    const result = await pool.query(
      `UPDATE notifications SET comment = $1 WHERE id = $2 RETURNING *`,
      [comment, id]
    );

    if (!result.rowCount) {
      return res.status(404).json({ message: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    return res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ", data: result.rows[0] });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (addCommentToNotification):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  const userId = extractUserId(req);

  if (!userId) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π." });
  }

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    return res.json({ success: true });
  } catch (error) {
    console.error("‚ùå SQL-–ø–æ–º–∏–ª–∫–∞ (deleteAllNotifications):", error);
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å", error: error.message });
  }
};

module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  getNotificationsByUserId,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
