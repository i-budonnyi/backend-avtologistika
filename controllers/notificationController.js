const pool = require("../config/db");

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (req, res) => {
  const { user_id, message } = req.body;
  console.log("üì• [POST] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", { user_id, message });

  if (!user_id || !message) {
    console.warn("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è user_id –∞–±–æ message");
    return res.status(400).json({ message: "user_id —Ç–∞ message —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º–∏." });
  }

  try {
    const result = await pool.query(
      `INSERT INTO notifications (user_id, message) VALUES ($1, $2) RETURNING *`,
      [user_id, message]
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", result.rows[0]);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error("‚ùå createNotification:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.", error: error.message });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserNotifications = async (req, res) => {
  const { userId } = req.params;
  console.log("üì° [GET] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è userId:", userId);

  if (!userId) {
    console.warn("‚ö†Ô∏è userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —É params");
    return res.status(400).json({ message: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ userId." });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC`,
      [userId]
    );
    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${result.rows.length} —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("‚ùå getUserNotifications:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å.", error: error.message });
  }
};

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const updateNotificationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  console.log("üîß [PATCH] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", { id, status });

  if (!status) {
    console.warn("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Å—Ç–∞—Ç—É—Å —É –∑–∞–ø–∏—Ç—ñ");
    return res.status(400).json({ message: "–°—Ç–∞—Ç—É—Å —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
  }

  try {
    await pool.query(`UPDATE notifications SET status = $1 WHERE id = $2`, [status, id]);
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ID ${id} –Ω–∞ '${status}'`);
    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.", id, status });
  } catch (error) {
    console.error("‚ùå updateNotificationStatus:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.", error: error.message });
  }
};

// üîî –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
const markAsRead = async (req, res) => {
  const { id } = req.params;
  console.log("üëÅ [PATCH] –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ID:", id);

  try {
    await pool.query(`UPDATE notifications SET is_read = true WHERE id = $1`, [id]);
    console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è ID ${id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ`);
    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå markAsRead:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á–∏—Ç–∞–Ω–æ—Å—Ç—ñ", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const addCommentToNotification = async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;
  console.log("‚úèÔ∏è [PATCH] –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", { id, comment });

  if (!comment) {
    console.warn("‚ö†Ô∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
    return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º." });
  }

  try {
    await pool.query(`UPDATE notifications SET comment = $1 WHERE id = $2`, [comment, id]);
    console.log(`‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ID ${id}`);
    res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ.", id, comment });
  } catch (error) {
    console.error("‚ùå addCommentToNotification:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", error: error.message });
  }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const deleteAllNotifications = async (req, res) => {
  const { userId } = req.params;
  console.log("üóë [DELETE] –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userId);

  if (!userId) {
    return res.status(400).json({ message: "userId —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è." });
  }

  try {
    await pool.query(`DELETE FROM notifications WHERE user_id = $1`, [userId]);
    console.log(`‚úÖ –£—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId} –≤–∏–¥–∞–ª–µ–Ω–æ`);
    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå deleteAllNotifications:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", error: error.message });
  }
};

module.exports = {
  addNotification: createNotification,
  getUserNotifications,
  updateNotificationStatus,
  markAsRead,
  addCommentToNotification,
  deleteAllNotifications,
};
