const sequelize = require("../config/database");

console.log("[rolesController] üìå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ —Ä–æ–ª–µ–π...");

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserRole = async (userId) => {
    console.log(`[rolesController] üîç –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –¥–ª—è userId=${userId}`);
    try {
        const [user] = await sequelize.query(
            `SELECT id, first_name, last_name, email, role, profile_picture 
             FROM users WHERE id = :userId LIMIT 1`,
            {
                replacements: { userId },
                type: sequelize.QueryTypes.SELECT,
            }
        );

        if (!user) {
            console.warn(`[rolesController] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ userId=${userId}`);
            return null;
        }

        console.log("[rolesController] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–ª—å:", user);
        return user;
    } catch (error) {
        console.error("[rolesController] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ:", error);
        throw error;
    }
};

// ‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
const assignRole = async (req, res) => {
    try {
        const { user_id, role_id } = req.body;
        console.log(`[assignRole] üè∑ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ role_id=${role_id} –¥–ª—è user_id=${user_id}`);

        const [existingRole] = await sequelize.query(
            `SELECT * FROM user_roles WHERE user_id = :user_id AND role_id = :role_id LIMIT 1`,
            {
                replacements: { user_id, role_id },
                type: sequelize.QueryTypes.SELECT,
            }
        );

        if (existingRole) {
            return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î —Ü—é —Ä–æ–ª—å." });
        }

        await sequelize.query(
            `INSERT INTO user_roles (user_id, role_id) VALUES (:user_id, :role_id)`,
            {
                replacements: { user_id, role_id },
                type: sequelize.QueryTypes.INSERT,
            }
        );

        console.log("[assignRole] ‚úÖ –†–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ.");
        res.status(201).json({ message: "–†–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ." });
    } catch (error) {
        console.error("[assignRole] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–æ–ª–µ–π
const getRoles = async (req, res) => {
    try {
        console.log("[getRoles] üìú –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–æ–ª–µ–π...");
        const roles = await sequelize.query(
            `SELECT * FROM roles`,
            { type: sequelize.QueryTypes.SELECT }
        );

        console.log(`[getRoles] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${roles.length} —Ä–æ–ª–µ–π.`);
        res.status(200).json(roles);
    } catch (error) {
        console.error("[getRoles] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª–µ–π:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserRoles = async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`[getUserRoles] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª–µ–π –¥–ª—è user_id=${id}`);

        const userRoles = await sequelize.query(
            `SELECT * FROM user_roles WHERE user_id = :id`,
            {
                replacements: { id },
                type: sequelize.QueryTypes.SELECT,
            }
        );

        if (!userRoles.length) {
            return res.status(404).json({ message: "–†–æ–ª—ñ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        }

        console.log(`[getUserRoles] ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${userRoles.length} —Ä–æ–ª–µ–π –¥–ª—è user_id=${id}`);
        res.status(200).json(userRoles);
    } catch (error) {
        console.error("[getUserRoles] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
    }
};

module.exports = { getUserRole, assignRole, getRoles, getUserRoles };
