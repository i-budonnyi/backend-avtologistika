const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");

/**
 * ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤ –∂—É—Ä—ñ
 */
const getAllJuryMembers = async (req, res) => {
    try {
        console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤ –∂—É—Ä—ñ...");

        const juryMembers = await sequelize.query(
            `SELECT jm.user_id, jm.first_name, jm.last_name, jm.phone, jm.email, 
                    COALESCE(r.name, 'jury_member') AS role
             FROM jury_members jm
             LEFT JOIN user_roles ur ON jm.user_id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             ORDER BY jm.last_name ASC`,
            { type: QueryTypes.SELECT }
        );

        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${juryMembers.length} —á–ª–µ–Ω—ñ–≤ –∂—É—Ä—ñ.`);
        res.status(200).json(juryMembers);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–ª–µ–Ω—ñ–≤ –∂—É—Ä—ñ:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–ª–µ–Ω—ñ–≤ –∂—É—Ä—ñ." });
    }
};

/**
 * ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ –∑–∞ user_id
 */
const getJuryMemberById = async (req, res) => {
    try {
        let { user_id } = req.params;
        user_id = Number(user_id);

        if (isNaN(user_id)) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id." });
        }

        console.log(`üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ –∑ user_id=${user_id}`);

        const juryMember = await sequelize.query(
            `SELECT jm.user_id, jm.first_name, jm.last_name, jm.phone, jm.email, 
                    COALESCE(r.name, 'jury_member') AS role
             FROM jury_members jm
             LEFT JOIN user_roles ur ON jm.user_id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             WHERE jm.user_id = :user_id
             LIMIT 1`,
            {
                replacements: { user_id },
                type: QueryTypes.SELECT,
            }
        );

        if (!juryMember.length) {
            return res.status(404).json({ error: "–ß–ª–µ–Ω –∂—É—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π." });
        }

        console.log("‚úÖ –ß–ª–µ–Ω –∂—É—Ä—ñ –∑–Ω–∞–π–¥–µ–Ω–∏–π:", juryMember[0]);
        res.status(200).json(juryMember[0]);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–ª–µ–Ω–∞ –∂—É—Ä—ñ:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ." });
    }
};

/** ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ */
const getLoggedJuryMember = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(401).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π." });
        }

        let user_id = Number(req.user.id);

        if (isNaN(user_id)) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id." });
        }

        console.log(`üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∂—É—Ä—ñ –¥–ª—è user_id=${user_id}`);

        const juryMember = await sequelize.query(
            `SELECT jm.user_id, jm.first_name, jm.last_name, jm.phone, jm.email, 
                    COALESCE(r.name, 'jury_member') AS role
             FROM jury_members jm
             LEFT JOIN user_roles ur ON jm.user_id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             WHERE jm.user_id = :user_id
             LIMIT 1`,
            {
                replacements: { user_id },
                type: QueryTypes.SELECT,
            }
        );

        if (!juryMember.length) {
            return res.status(404).json({ error: "–ß–ª–µ–Ω –∂—É—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π." });
        }

        console.log("üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ /api/juryPanel/me:", juryMember[0]);

        res.status(200).json(juryMember[0]);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ.", details: error.message });
    }
};

console.log("üü¢ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä juryPanelController.js –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
module.exports = { getAllJuryMembers, getJuryMemberById, getLoggedJuryMember };
