const jwt = require("jsonwebtoken");
const { Sequelize } = require("sequelize");
const sequelize = require("../config/database");
const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// üîπ –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
const log = (level, message, details = {}) => {
  const timestamp = new Date().toISOString();
  console[level](`[${timestamp}] ${message}`);
  if (Object.keys(details).length) {
    console[level](`[DETAILS] ${JSON.stringify(details, null, 2)}`);
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getUserProfile = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      log("warn", "‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", { ip: req.ip });
      return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ." });
    }

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, JWT_SECRET);

    if (!decoded.id) {
      log("error", "‚ùå ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ", { token });
      return res.status(400).json({ message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ" });
    }

    log("info", "üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", { user_id: decoded.id });

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
    const [user] = await sequelize.query(
      `SELECT id, first_name, last_name, email, phone, role FROM users WHERE id = ? LIMIT 1;`,
      { replacements: [decoded.id], type: Sequelize.QueryTypes.SELECT }
    );

    if (!user) {
      log("warn", "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", { user_id: decoded.id });
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    log("info", "‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–Ω–∞–π–¥–µ–Ω–æ", { role: user.role });

    // **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —á–ª–µ–Ω–æ–º –∂—É—Ä—ñ**
    const [juryMember] = await sequelize.query(
      `SELECT user_id, first_name, last_name FROM jury_members WHERE user_id = ? LIMIT 1;`,
      { replacements: [user.id], type: Sequelize.QueryTypes.SELECT }
    );

    if (juryMember && juryMember.user_id) {
      log("info", "‚öñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - JURY MEMBER, —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /jury", { user_id: user.id });
      return res.status(200).json({
        id: user.id,
        first_name: juryMember.first_name,
        last_name: juryMember.last_name,
        email: user.email,
        phone: user.phone,
        role: "jury_member",
        redirect: "/jury",
      });
    }

    // **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—à–∏—Ö —Ä–æ–ª–µ–π**
    const role = user.role ? user.role.toLowerCase().replace(" ", "_") : "worker";

    if (role === "ambassador") {
      log("info", "üéñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - AMBASSADOR, —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /ambassadors", { user_id: user.id });
      return res.status(200).json({
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        phone: user.phone,
        role: "ambassador",
        redirect: "/ambassadors",
      });
    }

    if (role === "jury_secretary") {
      log("info", "üìú –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - JURY SECRETARY, —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /jury-secretary", { user_id: user.id });
      return res.status(200).json({
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        phone: user.phone,
        role: "jury_secretary",
        redirect: "/jury-secretary",
      });
    }

    if (role === "project_manager") {
      log("info", "üìÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - PROJECT MANAGER, —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /project-manager", { user_id: user.id });
      return res.status(200).json({
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        phone: user.phone,
        role: "project_manager",
        redirect: "/project-manager",
      });
    }

    log("info", "üõ† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–º–±–∞—Å–∞–¥–æ—Ä–æ–º, —á–ª–µ–Ω–æ–º –∂—É—Ä—ñ, —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º –∂—É—Ä—ñ –∞–±–æ PM. –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ 'worker'", { 
      user_id: user.id, 
      assigned_role: "worker"
    });

    return res.status(200).json({
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name,
      email: user.email,
      phone: user.phone,
      role: "worker",
      redirect: "/worker",
    });
  } catch (error) {
    log("error", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", { message: error.message });
    return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
  }
};

// ‚úÖ –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const logout = (req, res) => {
  log("info", "üîí –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", { ip: req.ip });
  return res.status(200).json({ message: "–í–∏—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π" });
};

// **–ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏**
module.exports = {
  getUserProfile,
  logout,
};
