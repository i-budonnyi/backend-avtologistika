const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const sequelize = require("../config/database");
const { io } = require("../index"); // üì° WebSocket-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const { sendNotification } = require("../index"); // üîî –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å

// ‚úÖ Middleware –¥–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const authenticateUser = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
  }

  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = { user_id: decoded.user_id || decoded.id };
    if (!req.user.user_id) {
      return res.status(401).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
    next();
  } catch (error) {
    return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –±–ª–æ–≥–∏ —Ç–∞ —ñ–¥–µ—ó
const getAllEntries = async (req, res) => {
  try {
    const blogs = await sequelize.query(
      `SELECT b.id, b.title, b.description, b.user_id AS authorId,
              COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
              COALESCE(u.last_name, '') AS author_last_name,
              u.email AS author_email,
              b.created_at AS createdAt
       FROM blog b
       LEFT JOIN users u ON b.user_id = u.id
       ORDER BY b.created_at DESC`,
      { type: QueryTypes.SELECT }
    );

    const ideas = await sequelize.query(
      `SELECT i.id, i.title, i.description, i.user_id AS authorId,
              COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
              COALESCE(u.last_name, '') AS author_last_name,
              u.email AS author_email,
              i.created_at AS createdAt
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       ORDER BY i.created_at DESC`,
      { type: QueryTypes.SELECT }
    );

    res.status(200).json({ blogs, ideas });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤", error: error.message });
  }
};

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–ª–æ–≥ –∞–±–æ —ñ–¥–µ—é
const createBlogEntry = async (req, res) => {
  try {
    const { title, description, type } = req.body;
    const userId = req.user.user_id;

    if (!title || !description || !type) {
      return res.status(400).json({ message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    const table = type === "blog" ? "blog" : "ideas";

    const [result] = await sequelize.query(
      `INSERT INTO ${table} (title, description, user_id, created_at)
       VALUES (:title, :description, :userId, NOW()) RETURNING id`,
      {
        replacements: { title, description, userId },
        type: QueryTypes.INSERT,
      }
    );

    // üì° WebSocket ‚Äî —à–∏—Ä–æ–∫–æ–º–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    io.emit("entry_created", {
      id: result[0].id,
      title,
      description,
      type,
      user_id: userId,
    });

    // üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    sendNotification(userId, `‚úÖ ${type === "blog" ? "–ë–ª–æ–≥" : "–Ü–¥–µ—è"} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: "${title}"`);

    res.status(201).json({ message: "–ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ", id: result[0].id });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É", error: error.message });
  }
};

// ‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏ –±–ª–æ–≥ –∞–±–æ —ñ–¥–µ—é
const deleteBlogEntry = async (req, res) => {
  try {
    const { entryId } = req.params;
    const userId = req.user.user_id;

    const [deletedBlog] = await sequelize.query(
      `DELETE FROM blog WHERE id = :entryId AND user_id = :userId RETURNING id`,
      { replacements: { entryId, userId }, type: QueryTypes.DELETE }
    );

    if (deletedBlog.length) {
      return res.status(200).json({ message: "–ë–ª–æ–≥ –≤–∏–¥–∞–ª–µ–Ω–æ" });
    }

    const [deletedIdea] = await sequelize.query(
      `DELETE FROM ideas WHERE id = :entryId AND user_id = :userId RETURNING id`,
      { replacements: { entryId, userId }, type: QueryTypes.DELETE }
    );

    if (deletedIdea.length) {
      return res.status(200).json({ message: "–Ü–¥–µ—é –≤–∏–¥–∞–ª–µ–Ω–æ" });
    }

    res.status(404).json({ message: "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤" });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", error: error.message });
  }
};

// ‚úÖ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ —ñ–º–µ–Ω–µ–º
const addComment = async (req, res) => {
  const { entry_id, entry_type, comment } = req.body;
  const user_id = req.user?.user_id;

  if (!entry_id || !entry_type || !comment || !user_id) {
    return res.status(400).json({
      error: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ (entry_id, entry_type, comment, user_id).",
    });
  }

  const column =
    entry_type === "blog"
      ? "blog_id"
      : entry_type === "idea"
      ? "idea_id"
      : entry_type === "problem"
      ? "problem_id"
      : null;

  if (!column) {
    return res.status(400).json({ error: "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Å—É." });
  }

  try {
    await sequelize.query(
      `INSERT INTO comments (${column}, user_id, comment, created_at, updated_at)
       VALUES (:entry_id, :user_id, :comment, NOW(), NOW())`,
      {
        replacements: { entry_id, user_id, comment },
        type: QueryTypes.INSERT,
      }
    );

    console.log(`[addComment] ‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ`);

    // üì° WebSocket: —à–∏—Ä–æ–∫–æ–º–æ–≤–Ω–æ –≤—Å—ñ–º
    io.emit("new_comment", {
      entry_id,
      entry_type,
      comment,
      user_id,
    });

    res.status(201).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ." });
  } catch (err) {
    console.error("[addComment] ‚ùå", err.message);
    res.status(500).json({ error: err.message });
  }
};

module.exports = {
  authenticateUser,
  getAllEntries,
  createBlogEntry,
  deleteBlogEntry,
  addComment,
};
