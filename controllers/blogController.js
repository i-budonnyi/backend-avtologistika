const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const sequelize = require("../config/database");
const { getIO, sendNotification } = require("../socket");

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
const authenticateUser = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
  }

  try {
    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user_id = decoded.user_id || decoded.id;
    if (!user_id) {
      return res.status(401).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
    req.user = { user_id };
    next();
  } catch (error) {
    return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ (–±–ª–æ–≥–∏, —ñ–¥–µ—ó)
const getAllEntries = async (req, res) => {
  try {
    const blogs = await sequelize.query(
      `SELECT b.id, b.title, b.description, b.user_id AS authorId,
              COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
              COALESCE(u.last_name, '') AS author_last_name,
              u.email AS author_email,
              b.created_at AS createdAt
       FROM blog b
       LEFT JOIN users u ON b.user_id = u.id
       ORDER BY b.created_at DESC`,
      { type: QueryTypes.SELECT }
    );

    const ideas = await sequelize.query(
      `SELECT i.id, i.title, i.description, i.user_id AS authorId,
              COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
              COALESCE(u.last_name, '') AS author_last_name,
              u.email AS author_email,
              i.created_at AS createdAt
       FROM ideas i
       LEFT JOIN users u ON i.user_id = u.id
       ORDER BY i.created_at DESC`,
      { type: QueryTypes.SELECT }
    );

    res.status(200).json({ blogs, ideas });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤", error: error.message });
  }
};

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å
const createBlogEntry = async (req, res) => {
  const { title, description, type } = req.body;
  const userId = req.user.user_id;

  if (!title || !description || !type) {
    return res.status(400).json({ message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
  }

  const table = type === "blog" ? "blog" : "ideas";

  try {
    const [result] = await sequelize.query(
      `INSERT INTO ${table} (title, description, user_id, created_at)
       VALUES (:title, :description, :userId, NOW()) RETURNING id`,
      {
        replacements: { title, description, userId },
        type: QueryTypes.INSERT,
      }
    );

    getIO().emit("entry_created", {
      id: result[0].id,
      title,
      description,
      type,
      user_id: userId,
    });

    sendNotification(userId, `‚úÖ ${type === "blog" ? "–ë–ª–æ–≥" : "–Ü–¥–µ—è"} —Å—Ç–≤–æ—Ä–µ–Ω–æ: "${title}"`);

    res.status(201).json({ message: "–ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ", id: result[0].id });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É", error: error.message });
  }
};

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å
const deleteBlogEntry = async (req, res) => {
  const { entryId } = req.params;
  const userId = req.user.user_id;

  try {
    const [deletedBlog] = await sequelize.query(
      `DELETE FROM blog WHERE id = :entryId AND user_id = :userId RETURNING id`,
      { replacements: { entryId, userId }, type: QueryTypes.DELETE }
    );

    if (deletedBlog.length) {
      return res.status(200).json({ message: "–ë–ª–æ–≥ –≤–∏–¥–∞–ª–µ–Ω–æ" });
    }

    const [deletedIdea] = await sequelize.query(
      `DELETE FROM ideas WHERE id = :entryId AND user_id = :userId RETURNING id`,
      { replacements: { entryId, userId }, type: QueryTypes.DELETE }
    );

    if (deletedIdea.length) {
      return res.status(200).json({ message: "–Ü–¥–µ—é –≤–∏–¥–∞–ª–µ–Ω–æ" });
    }

    res.status(404).json({ message: "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤" });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", error: error.message });
  }
};

// üí¨ –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addComment = async (req, res) => {
  const { entry_id, entry_type, comment } = req.body;
  const user_id = req.user?.user_id;

  if (!entry_id || !entry_type || !comment || !user_id) {
    return res.status(400).json({
      error: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ (entry_id, entry_type, comment, user_id).",
    });
  }

  const typeMap = {
    blog: { column: "blog_id", table: "blog" },
    idea: { column: "idea_id", table: "ideas" },
    problem: { column: "problem_id", table: "problems" },
  };

  const config = typeMap[entry_type];
  if (!config) {
    return res.status(400).json({ error: "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Å—É." });
  }

  try {
    const [exists] = await sequelize.query(
      `SELECT id FROM ${config.table} WHERE id = :entry_id`,
      {
        replacements: { entry_id },
        type: QueryTypes.SELECT,
      }
    );

    if (!exists) {
      return res.status(404).json({ error: `–ó–∞–ø–∏—Å ${entry_type} –∑ ID ${entry_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.` });
    }

    const [inserted] = await sequelize.query(
      `INSERT INTO comments (${config.column}, user_id, text, created_at, updated_at)
       VALUES (:entry_id, :user_id, :comment, NOW(), NOW())
       RETURNING id, text, created_at`,
      {
        replacements: { entry_id, user_id, comment },
        type: QueryTypes.INSERT,
      }
    );

    getIO().emit("new_comment", {
      entryId: entry_id,
      entryType: entry_type,
      comment: {
        id: inserted[0].id,
        text: inserted[0].text,
        createdAt: inserted[0].created_at,
      }
    });

    res.status(201).json({ comment: inserted[0] });
  } catch (err) {
    console.error("[addComment] ‚ùå", err.message);
    res.status(500).json({ error: err.message });
  }
};


// üì§ –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
  authenticateUser,
  getAllEntries,
  createBlogEntry,
  deleteBlogEntry,
  addComment,
};
