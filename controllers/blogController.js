// ‚úÖ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π blogController.js

const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const sequelize = require("../config/database");

// ‚úÖ Middleware –¥–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const authenticateUser = (req, res, next) => {
    console.log("\n[AUTH] üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...");
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        console.warn("[AUTH] ‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
        return res.status(401).json({ message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (—Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)" });
    }

    const token = authHeader.split(" ")[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("[AUTH] üîë –î–µ–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω:", decoded);
        req.user = { user_id: decoded.user_id || decoded.id };

        if (!req.user.user_id) {
            console.error("[AUTH] ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π user_id —É —Ç–æ–∫–µ–Ω—ñ!");
            return res.status(401).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        }

        console.log(`[AUTH] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: ${req.user.user_id}`);
        next();
    } catch (error) {
        console.error("[AUTH] ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω", error.message);
        return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –±–ª–æ–≥–∏ —Ç–∞ —ñ–¥–µ—ó (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ)
const getAllEntries = async (req, res) => {
    try {
        console.log("\n[PROCESS] üì• –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ: GET /api/blogRoutes/entries");
        const userId = req.user.user_id;

        const blogs = await sequelize.query(
            `SELECT b.id, b.title, b.description, b.user_id AS authorId,
                    COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
                    COALESCE(u.last_name, '') AS author_last_name,
                    u.email AS author_email,
                    b.created_at AS createdAt
             FROM blog b
             LEFT JOIN users u ON b.user_id = u.id
             ORDER BY b.created_at DESC`,
            { type: QueryTypes.SELECT }
        );

        const ideas = await sequelize.query(
            `SELECT i.id, i.title, i.description, i.user_id AS authorId,
                    COALESCE(u.first_name, '–ù–µ–≤—ñ–¥–æ–º–∏–π') AS author_first_name,
                    COALESCE(u.last_name, '') AS author_last_name,
                    u.email AS author_email,
                    i.created_at AS createdAt
             FROM ideas i
             LEFT JOIN users u ON i.user_id = u.id
             ORDER BY i.created_at DESC`,
            { type: QueryTypes.SELECT }
        );

        if (!blogs.length && !ideas.length) {
            console.warn("[PROCESS] ‚ö†Ô∏è –ë–ª–æ–≥–∏ —Ç–∞ —ñ–¥–µ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!");
            return res.status(404).json({ message: "–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        console.log(`[PROCESS] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${blogs.length} –±–ª–æ–≥—ñ–≤ —Ç–∞ ${ideas.length} —ñ–¥–µ–π.`);
        res.status(200).json({ blogs, ideas });
    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤", error: error.message });
    }
};

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
const createBlogEntry = async (req, res) => {
    try {
        const { title, description, type } = req.body;
        const userId = req.user.user_id;

        if (!title || !description || !type) {
            return res.status(400).json({ message: "‚ùå –í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ." });
        }

        const tableName = type === "blog" ? "blog" : "ideas";
        const [newEntry] = await sequelize.query(
            `INSERT INTO ${tableName} (title, description, user_id, created_at)
             VALUES (:title, :description, :userId, NOW()) RETURNING id;`,
            { replacements: { title, description, userId }, type: QueryTypes.INSERT }
        );

        res.status(201).json({ message: "–ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.", id: newEntry[0].id });
    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É", error: error.message });
    }
};

// ‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å
const deleteBlogEntry = async (req, res) => {
    try {
        const { entryId } = req.params;
        const userId = req.user.user_id;

        if (!entryId) {
            return res.status(400).json({ message: "‚ùå ID –∑–∞–ø–∏—Å—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π." });
        }

        const [result] = await sequelize.query(
            `DELETE FROM blog WHERE id = :entryId AND user_id = :userId RETURNING id;`,
            { replacements: { entryId, userId }, type: QueryTypes.DELETE }
        );

        if (!result.length) {
            const [ideaResult] = await sequelize.query(
                `DELETE FROM ideas WHERE id = :entryId AND user_id = :userId RETURNING id;`,
                { replacements: { entryId, userId }, type: QueryTypes.DELETE }
            );

            if (!ideaResult.length) {
                return res.status(404).json({ message: "‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è." });
            }
        }

        res.status(200).json({ message: "–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ." });
    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É", error: error.message });
    }
};

// ‚úÖ –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
    authenticateUser,
    getAllEntries,
    createBlogEntry,
    deleteBlogEntry
};
