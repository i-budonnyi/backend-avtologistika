const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");

// üßº –õ–µ–≥–∫–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ‚Äî –±–µ–∑ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
const sanitizeText = (text) => {
  if (!text || typeof text !== "string") return "";
  return text
    .normalize("NFKC")
    .replace(/[\u{1F600}-\u{1F6FF}]/gu, "") // emoji
    .replace(/[\p{C}]/gu, "")               // control characters
    .replace(/\s+/g, " ")                   // –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    .trim();
};

// üîî –û–¥–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const createNotification = async (user_id, message) => {
  if (!user_id || !message || typeof message !== "string") return;
  try {
    const cleaned = sanitizeText(message);
    await sequelize.query(
      `INSERT INTO notifications (user_id, message, is_read) VALUES (:user_id, :message, false)`,
      {
        replacements: { user_id, message: cleaned },
        type: QueryTypes.INSERT,
      }
    );
  } catch (error) {
    console.error("‚ùå [createNotification] –ü–æ–º–∏–ª–∫–∞:", error.message);
  }
};

// üîî –ú–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
const createNotificationsBulk = async (userIds = [], message) => {
  if (!Array.isArray(userIds) || userIds.length === 0 || typeof message !== "string") return;
  try {
    const cleaned = sanitizeText(message);
    const values = userIds.map((_, i) => `(:user_id${i}, :message${i}, false)`).join(", ");
    const replacements = {};
    userIds.forEach((id, i) => {
      replacements[`user_id${i}`] = id;
      replacements[`message${i}`] = cleaned;
    });

    await sequelize.query(
      `INSERT INTO notifications (user_id, message, is_read) VALUES ${values}`,
      {
        replacements,
        type: QueryTypes.INSERT,
      }
    );
  } catch (error) {
    console.error("‚ùå [createNotificationsBulk] –ü–æ–º–∏–ª–∫–∞:", error.message);
  }
};

// üß† –ü–æ–¥—ñ—ó
const notify = async (eventName, payload = {}) => {
  try {
    switch (eventName) {
      case "idea_created":
        await createNotification(
          payload.ambassadorId,
          `${payload.userName} –ø–æ–¥–∞–≤ —ñ–¥–µ—é –∑ –≤–∞—à–∏–º –∞–º–±–∞—Å–∞–¥–æ—Ä—Å—Ç–≤–æ–º`
        );
        break;

      case "idea_voted":
        await createNotificationsBulk(
          payload.subscriberIds,
          `–ù–æ–≤–∏–π –≥–æ–ª–æ—Å –∑–∞ —ñ–¥–µ—é: "${payload.ideaTitle}"`
        );
        break;

      case "problem_submitted":
        await createNotification(
          payload.adminId,
          `–î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É: "${payload.problemTitle}"`
        );
        break;

      case "comment_added":
        await createNotification(
          payload.authorId,
          `–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –≤–∞—à–æ—ó —ñ–¥–µ—ó: "${payload.ideaTitle}"`
        );
        break;

      case "idea_on_agenda":
        await createNotification(
          payload.authorId,
          `–í–∞—à—É —ñ–¥–µ—é "${payload.ideaTitle}" –¥–æ–¥–∞–Ω–æ –¥–æ –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ`
        );
        break;

      case "jury_vote":
        await createNotification(
          payload.authorId,
          `–ß–ª–µ–Ω –∂—É—Ä—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ –≤–∞—à—É —ñ–¥–µ—é "${payload.ideaTitle}"`
        );
        break;

      default:
        console.warn(`‚ö†Ô∏è –ü–æ–¥—ñ—è "${eventName}" –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è`);
    }
  } catch (err) {
    console.error("‚ùå [notify] –ü–æ–º–∏–ª–∫–∞:", err.message);
  }
};

module.exports = {
  createNotification,
  createNotificationsBulk,
  notify,
};
