const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");

// ‚úÖ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
const addFeedbackMessage = async (req, res) => {
    try {
        console.log(`[REQUEST] POST /feedbackRoutes/add`);
        
        console.log(`[DEBUG] üîç req.user:`, JSON.stringify(req.user, null, 2));

        if (!req.user || !req.user.id) {
            console.error(`[ERROR] ‚ùå req.user –∞–±–æ req.user.id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ!`);
            return res.status(401).json({ 
                message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –í—ñ–¥—Å—É—Ç–Ω—ñ–π user_id —É —Ç–æ–∫–µ–Ω—ñ.", 
                user_data: req.user 
            });
        }

        const { idea_id, text } = req.body;
        const sender_id = req.user.id;
        const sender_role = req.user.role || "user"; 

        console.log(`[INPUT] sender_id=${sender_id}, sender_role=${sender_role}, idea_id=${idea_id}, text=${text}`);

        if (!text || text.trim() === "") {
            console.error(`[ERROR] ‚ùå –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.`);
            return res.status(400).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º." });
        }

        if (!idea_id) {
            console.error(`[ERROR] ‚ùå –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ idea_id.`);
            return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ idea_id." });
        }

        await sequelize.query(
            `INSERT INTO feedback_messages (idea_id, sender_id, sender_role, text, created_at)
             VALUES (:idea_id, :sender_id, :sender_role, :text, NOW())`,
            { replacements: { idea_id, sender_id, sender_role, text }, type: QueryTypes.INSERT }
        );

        console.log(`[SUCCESS] ‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.`);
        res.status(201).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ." });

    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è", error: error.message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —ñ–¥–µ—ó (–≤–∏–¥–∏–º—ñ –≤—Å—ñ–º)
const getFeedbackMessages = async (req, res) => {
    try {
        console.log(`[REQUEST] GET /feedbackRoutes/list`);
        
        console.log(`[DEBUG] üîç req.user:`, JSON.stringify(req.user, null, 2));

        if (!req.user || !req.user.id) {
            console.error(`[ERROR] ‚ùå req.user –∞–±–æ req.user.id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ!`);
            return res.status(401).json({ 
                message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –í—ñ–¥—Å—É—Ç–Ω—ñ–π user_id —É —Ç–æ–∫–µ–Ω—ñ.", 
                user_data: req.user 
            });
        }

        const { idea_id } = req.query;

        if (!idea_id) {
            console.error(`[ERROR] ‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ idea_id.`);
            return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ idea_id." });
        }

        console.log(`[PROCESS] üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —ñ–¥–µ—ó ID=${idea_id}`);

        const messages = await sequelize.query(
            `SELECT fm.id, fm.idea_id, fm.sender_id, fm.sender_role, fm.text, fm.created_at,
                   u.first_name AS sender_first_name, u.last_name AS sender_last_name
            FROM feedback_messages fm
            LEFT JOIN users u ON fm.sender_id = u.id
            WHERE fm.idea_id = :idea_id
            ORDER BY fm.created_at ASC`,
            { replacements: { idea_id }, type: QueryTypes.SELECT }
        );

        console.log(`[SUCCESS] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${messages.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.`);
        res.status(200).json(messages);
    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤", error: error.message });
    }
};

// ‚úÖ –í–∏–±—ñ—Ä —ñ–¥–µ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
const selectIdeaForApplication = async (req, res) => {
    try {
        console.log(`[REQUEST] POST /feedbackRoutes/select-idea`);

        if (!req.user || !req.user.id) {
            console.error(`[ERROR] ‚ùå req.user –∞–±–æ req.user.id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ!`);
            return res.status(401).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π." });
        }

        const { idea_id } = req.body;
        const user_id = req.user.id;

        if (!idea_id) {
            console.error(`[ERROR] ‚ùå –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ idea_id.`);
            return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ idea_id." });
        }

        console.log(`[PROCESS] üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user_id} –≤–∏–±—Ä–∞–≤ —ñ–¥–µ—é ${idea_id} –¥–ª—è –∑–∞—è–≤–∫–∏.`);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —É —Ç–∏–º—á–∞—Å–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∞–±–æ —Å–µ—Å—ñ—é
        await sequelize.query(
            `INSERT INTO selected_ideas (user_id, idea_id, selected_at)
             VALUES (:user_id, :idea_id, NOW())
             ON CONFLICT (user_id) DO UPDATE SET idea_id = EXCLUDED.idea_id, selected_at = NOW()`,
            { replacements: { user_id, idea_id }, type: QueryTypes.INSERT }
        );

        console.log(`[SUCCESS] ‚úÖ –í–∏–±—ñ—Ä —ñ–¥–µ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
        res.status(200).json({ message: "–Ü–¥–µ—è –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏." });

    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —ñ–¥–µ—ó:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —ñ–¥–µ—ó", error: error.message });
    }
};

module.exports = { addFeedbackMessage, getFeedbackMessages, selectIdeaForApplication };
