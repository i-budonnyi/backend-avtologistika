const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const { io } = require("../index");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ –í–∏—Ç—è–≥ user_id –∑ JWT
const getUserIdFromToken = (req) => {
  try {
    const authHeader = req.headers.authorization;
    console.log("üîê Authorization Header:", authHeader);

    if (!authHeader || !authHeader.startsWith("Bearer ")) return null;

    const token = authHeader.split(" ")[1];
    console.log("üîê Extracted Token:", token);

    const decoded = jwt.verify(token, JWT_SECRET);
    console.log("‚úÖ JWT decoded:", decoded);

    return decoded.user_id ?? decoded.id ?? null;
  } catch (err) {
    console.error("‚ùå JWT –ø–æ–º–∏–ª–∫–∞:", err.message);
    return null;
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getSubscriptions = async (req, res) => {
  console.log("üì• –ó–∞–ø–∏—Ç: getSubscriptions");
  const user_id = getUserIdFromToken(req);

  if (!user_id) {
    console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ getSubscriptions");
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  const sql = `
    SELECT 
      s.post_id,
      i.title,
      i.description,
      i.status,
      u.first_name AS author_first_name,
      u.last_name AS author_last_name
    FROM subscriptions s
    JOIN ideas i ON s.post_id = i.id
    JOIN users u ON i.user_id = u.id
    WHERE s.user_id = :user_id
  `;

  console.log("üß™ SQL:", sql);
  console.log("üîÅ –ó–∞–º—ñ–Ω–∞:", { user_id });

  try {
    const subscriptions = await sequelize.query(sql, {
      replacements: { user_id },
      type: QueryTypes.SELECT,
      logging: console.log,
    });

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∏:", subscriptions);
    res.status(200).json({ subscriptions });
  } catch (err) {
    console.error("‚ùå SQL –ø–æ–º–∏–ª–∫–∞:", err.message);
    res.status(500).json({
      error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫",
      message: err.message,
    });
  }
};

// ‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞
const subscribeToEntry = async (req, res) => {
  console.log("üì• –ó–∞–ø–∏—Ç: subscribeToEntry", req.body);
  const { post_id } = req.body;
  const user_id = getUserIdFromToken(req);

  if (!user_id) {
    console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ subscribeToEntry");
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  try {
    await sequelize.query(
      `INSERT INTO subscriptions (user_id, post_id) VALUES (:user_id, :post_id)
       ON CONFLICT DO NOTHING`,
      {
        replacements: { user_id, post_id },
        type: QueryTypes.INSERT,
        logging: console.log,
      }
    );

    console.log("‚úÖ –î–æ–¥–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É");
    io.emit("subscription_added", {
      user_id,
      post_id,
      timestamp: new Date(),
    });

    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –¥–æ–¥–∞–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", details: err.message });
  }
};

// ‚úÖ –í—ñ–¥–ø–∏—Å–∫–∞
const unsubscribeFromEntry = async (req, res) => {
  console.log("üì• –ó–∞–ø–∏—Ç: unsubscribeFromEntry", req.body);
  const { post_id } = req.body;
  const user_id = getUserIdFromToken(req);

  if (!user_id) {
    console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ unsubscribeFromEntry");
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  try {
    await sequelize.query(
      `DELETE FROM subscriptions WHERE user_id = :user_id AND post_id = :post_id`,
      {
        replacements: { user_id, post_id },
        type: QueryTypes.DELETE,
        logging: console.log,
      }
    );

    console.log("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É");
    io.emit("subscription_removed", {
      user_id,
      post_id,
      timestamp: new Date(),
    });

    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", details: err.message });
  }
};

module.exports = {
  getSubscriptions,
  subscribeToEntry,
  unsubscribeFromEntry,
};
