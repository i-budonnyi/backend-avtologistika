const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const { io } = require("../index");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ –í–∏—Ç—è–≥ user_id –∑ JWT
const getUserIdFromToken = (req) => {
  try {
    const authHeader = req.headers.authorization;
    console.log("üîê Authorization Header:", authHeader);

    if (!authHeader || !authHeader.startsWith("Bearer ")) return null;

    const token = authHeader.split(" ")[1];
    console.log("üîê Extracted Token:", token);

    const decoded = jwt.verify(token, JWT_SECRET);
    console.log("‚úÖ JWT decoded:", decoded);

    return decoded.user_id || decoded.id || null;
  } catch (err) {
    console.error("‚ùå JWT –ø–æ–º–∏–ª–∫–∞:", err.message);
    return null;
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
console.log("üß™ DEBUG SQL –ó–∞–ø–∏—Ç:", sql);
console.log("üîÅ –ó–∞–º—ñ–Ω–∞:", { user_id });

try {
  const subscriptions = await sequelize.query(sql, {
    replacements: { user_id },
    type: QueryTypes.SELECT,
    logging: console.log,
  });

  console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫–∏:", subscriptions);

  res.status(200).json({ subscriptions });
} catch (err) {
  console.error("‚ùå –ü–û–ú–ò–õ–ö–ê SQL:", {
    message: err.message,
    stack: err.stack,
  });

  res.status(500).json({
    error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫",
    message: err.message,
  });
}


// ‚úÖ –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
const unsubscribeFromEntry = async (req, res) => {
  try {
    console.log("üì• –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–ø–∏—Å–∫—É:", req.body);

    const { entry_id, entry_type } = req.body;
    const user_id = getUserIdFromToken(req);

    if (!user_id) {
      console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ");
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
    }

    const column = entry_type === "blog" ? "blog_id" : entry_type === "idea" ? "idea_id" : "problem_id";

    console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É: user_id=${user_id}, entry_id=${entry_id}, type=${entry_type}, column=${column}`);

    await sequelize.query(
      `DELETE FROM subscriptions WHERE user_id = :user_id AND ${column} = :entry_id`,
      {
        replacements: { user_id, entry_id },
        type: QueryTypes.DELETE,
        logging: console.log,
      }
    );

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –ë–î");

    io.emit("subscription_removed", {
      user_id,
      entry_id,
      entry_type,
      timestamp: new Date(),
    });

    console.log("üì° –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∫–µ—Ç-–ø–æ–¥—ñ—é: subscription_removed");
    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", details: err.message });
  }
};

module.exports = {
  getSubscriptions,
  subscribeToEntry,
  unsubscribeFromEntry,
};
