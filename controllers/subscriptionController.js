const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const { io } = require("../index");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ –í–∏—Ç—è–≥ user_id –∑ JWT
const getUserIdFromToken = (req) => {
  try {
    const authHeader = req.headers.authorization;
    console.log("üîê Authorization Header:", authHeader);

    if (!authHeader || !authHeader.startsWith("Bearer ")) return null;

    const token = authHeader.split(" ")[1];
    console.log("üîê Extracted Token:", token);

    const decoded = jwt.verify(token, JWT_SECRET);
    console.log("‚úÖ JWT decoded:", decoded);

    return decoded.user_id || decoded.id || null;
  } catch (err) {
    console.error("‚ùå JWT –ø–æ–º–∏–ª–∫–∞:", err.message);
    return null;
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getSubscriptions = async (req, res) => {
  try {
    console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ getSubscriptions");

    const user_id = getUserIdFromToken(req);
    if (!user_id) {
      console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç (user_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)");
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
    }

    console.log("üîç –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id:", user_id);

    const sql = `
      SELECT 
        s.blog_id, s.idea_id, s.problem_id,
        COALESCE(b.title, i.title, p.title) AS title,
        COALESCE(b.description, i.description, p.description) AS description,
        COALESCE(i.status, p.status, 'N/A') AS status,
        CASE 
          WHEN s.blog_id IS NOT NULL THEN 'blog' 
          WHEN s.idea_id IS NOT NULL THEN 'idea' 
          WHEN s.problem_id IS NOT NULL THEN 'problem'
        END AS type,
        COALESCE(b.user_id, i.user_id, p.user_id) AS author_id,
        u.first_name AS author_first_name,
        u.last_name AS author_last_name
      FROM subscriptions s
      LEFT JOIN blog b ON s.blog_id = b.id
      LEFT JOIN ideas i ON s.idea_id = i.id
      LEFT JOIN problems p ON s.problem_id = p.id
      LEFT JOIN users u ON u.id = COALESCE(b.user_id, i.user_id, p.user_id)
      WHERE s.user_id = :user_id
    `;

    console.log("üìÑ SQL Query to execute:\n", sql);
    console.log("üìå –ó–∞–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", { user_id });

    const subscriptions = await sequelize.query(sql, {
      replacements: { user_id },
      type: QueryTypes.SELECT,
      logging: console.log, // –≤–∏–≤–æ–¥–∏—Ç—å —Å–∏—Ä–∏–π SQL-–∑–∞–ø–∏—Ç
    });

    console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫–∏:", subscriptions);
    res.status(200).json({ subscriptions });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫:", {
      error: err.message,
      stack: err.stack,
    });

    res.status(500).json({
      error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫",
      details: err.message,
    });
  }
};

// ‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
const subscribeToEntry = async (req, res) => {
  try {
    console.log("üì• –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É:", req.body);

    const { entry_id, entry_type } = req.body;
    const user_id = getUserIdFromToken(req);

    if (!user_id) {
      console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ");
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
    }

    const column = entry_type === "blog" ? "blog_id" : entry_type === "idea" ? "idea_id" : "problem_id";

    console.log(`üìå –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É: user_id=${user_id}, entry_id=${entry_id}, type=${entry_type}, column=${column}`);

    await sequelize.query(
      `INSERT INTO subscriptions (user_id, ${column}) VALUES (:user_id, :entry_id)
       ON CONFLICT DO NOTHING`,
      {
        replacements: { user_id, entry_id },
        type: QueryTypes.INSERT,
        logging: console.log,
      }
    );

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –ë–î");

    io.emit("subscription_added", {
      user_id,
      entry_id,
      entry_type,
      timestamp: new Date(),
    });

    console.log("üì° –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∫–µ—Ç-–ø–æ–¥—ñ—é: subscription_added");
    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –¥–æ–¥–∞–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", details: err.message });
  }
};

// ‚úÖ –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
const unsubscribeFromEntry = async (req, res) => {
  try {
    console.log("üì• –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–ø–∏—Å–∫—É:", req.body);

    const { entry_id, entry_type } = req.body;
    const user_id = getUserIdFromToken(req);

    if (!user_id) {
      console.warn("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ");
      return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
    }

    const column = entry_type === "blog" ? "blog_id" : entry_type === "idea" ? "idea_id" : "problem_id";

    console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É: user_id=${user_id}, entry_id=${entry_id}, type=${entry_type}, column=${column}`);

    await sequelize.query(
      `DELETE FROM subscriptions WHERE user_id = :user_id AND ${column} = :entry_id`,
      {
        replacements: { user_id, entry_id },
        type: QueryTypes.DELETE,
        logging: console.log,
      }
    );

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –ë–î");

    io.emit("subscription_removed", {
      user_id,
      entry_id,
      entry_type,
      timestamp: new Date(),
    });

    console.log("üì° –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∫–µ—Ç-–ø–æ–¥—ñ—é: subscription_removed");
    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", details: err.message });
  }
};

module.exports = {
  getSubscriptions,
  subscribeToEntry,
  unsubscribeFromEntry,
};
