const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");
const { io } = require("../index");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ –í–∏—Ç—è–≥ user_id –∑ JWT
const getUserIdFromToken = (req) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) return null;

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, JWT_SECRET);
    return decoded.user_id ?? decoded.id ?? null;
  } catch (err) {
    console.error("‚ùå JWT –ø–æ–º–∏–ª–∫–∞:", err.message);
    return null;
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ç–æ—á–Ω–µ–Ω–∏–º CASE-–ª–æ–≥—É–≤–∞–Ω–Ω—è–º
const getSubscriptions = async (req, res) => {
  const user_id = getUserIdFromToken(req);
  console.log("üßæ JWT -> user_id:", user_id);

  if (!user_id) {
    console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.");
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  const sql = `
    SELECT 
      s.*,
      CASE
        WHEN s.post_id IS NOT NULL THEN po.title
        WHEN s.blog_id IS NOT NULL THEN b.title
        WHEN s.idea_id IS NOT NULL THEN i.title
        WHEN s.problem_id IS NOT NULL THEN p.title
        ELSE '–ë–µ–∑ –Ω–∞–∑–≤–∏'
      END AS title,
      CASE
        WHEN s.post_id IS NOT NULL THEN po.description
        WHEN s.blog_id IS NOT NULL THEN b.description
        WHEN s.idea_id IS NOT NULL THEN i.description
        WHEN s.problem_id IS NOT NULL THEN p.description
        ELSE '–ë–µ–∑ –æ–ø–∏—Å—É'
      END AS description,
      CASE
        WHEN s.post_id IS NOT NULL THEN po.status
        WHEN s.idea_id IS NOT NULL THEN i.status
        WHEN s.problem_id IS NOT NULL THEN p.status
        ELSE 'N/A'
      END AS status,
      CASE
        WHEN s.post_id IS NOT NULL THEN po.user_id
        WHEN s.blog_id IS NOT NULL THEN b.user_id
        WHEN s.idea_id IS NOT NULL THEN i.user_id
        WHEN s.problem_id IS NOT NULL THEN p.user_id
      END AS author_id,
      u.first_name AS author_first_name,
      u.last_name AS author_last_name
    FROM subscriptions s
    LEFT JOIN posts po ON s.post_id = po.id
    LEFT JOIN blogs b ON s.blog_id = b.id
    LEFT JOIN ideas i ON s.idea_id = i.id
    LEFT JOIN problems p ON s.problem_id = p.id
    LEFT JOIN users u ON u.id = CASE
      WHEN s.post_id IS NOT NULL THEN po.user_id
      WHEN s.blog_id IS NOT NULL THEN b.user_id
      WHEN s.idea_id IS NOT NULL THEN i.user_id
      WHEN s.problem_id IS NOT NULL THEN p.user_id
    END
    WHERE s.user_id = :user_id
    ORDER BY s.updated_at DESC
  `;

  console.log("üì• SQL —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:", { user_id });
  console.log("üìú SQL:\n", sql);

  try {
    const subscriptions = await sequelize.query(sql, {
      replacements: { user_id },
      type: QueryTypes.SELECT,
      logging: console.log,
    });

    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${subscriptions.length} –ø—ñ–¥–ø–∏—Å–æ–∫`);
    if (subscriptions.length > 0) {
      console.log("üßæ –ü–µ—Ä—à–∞:", subscriptions[0]);
    }

    res.status(200).json({ subscriptions });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ SQL:", err.message);
    res.status(500).json({
      error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫",
      message: err.message,
    });
  }
};

// ‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞
const subscribeToEntry = async (req, res) => {
  const { post_id, blog_id, idea_id, problem_id } = req.body;
  const user_id = getUserIdFromToken(req);

  console.log("üì• –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É:", { post_id, blog_id, idea_id, problem_id });
  console.log("üîê user_id:", user_id);

  if (!user_id) {
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  const column = post_id
    ? "post_id"
    : blog_id
    ? "blog_id"
    : idea_id
    ? "idea_id"
    : problem_id
    ? "problem_id"
    : null;
  const value = post_id || blog_id || idea_id || problem_id;

  if (!column || !value) {
    console.warn("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –æ–±'—î–∫—Ç–∞ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏.");
    return res
      .status(400)
      .json({ error: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏." });
  }

  try {
    const [result, metadata] = await sequelize.query(
      `INSERT INTO subscriptions (user_id, ${column}) 
       VALUES (:user_id, :value) 
       ON CONFLICT DO NOTHING`,
      {
        replacements: { user_id, value },
        type: QueryTypes.INSERT,
        logging: console.log,
      }
    );

    console.log("‚úÖ INSERT –≤–∏–∫–æ–Ω–∞–Ω–æ:", result);
    io.emit("subscription_added", {
      user_id,
      entry_id: value,
      column,
      timestamp: new Date(),
    });

    res.status(200).json({ message: "‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–æ–¥–∞–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ:", err.message);
    res.status(500).json({
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
      details: err.message,
    });
  }
};

// ‚úÖ –í—ñ–¥–ø–∏—Å–∫–∞
const unsubscribeFromEntry = async (req, res) => {
  const { post_id, blog_id, idea_id, problem_id } = req.body;
  const user_id = getUserIdFromToken(req);

  if (!user_id) {
    return res.status(401).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è." });
  }

  const column = post_id
    ? "post_id"
    : blog_id
    ? "blog_id"
    : idea_id
    ? "idea_id"
    : problem_id
    ? "problem_id"
    : null;
  const value = post_id || blog_id || idea_id || problem_id;

  if (!column || !value) {
    return res
      .status(400)
      .json({ error: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏." });
  }

  try {
    await sequelize.query(
      `DELETE FROM subscriptions WHERE user_id = :user_id AND ${column} = :value`,
      {
        replacements: { user_id, value },
        type: QueryTypes.DELETE,
        logging: false,
      }
    );

    io.emit("subscription_removed", {
      user_id,
      entry_id: value,
      column,
      timestamp: new Date(),
    });

    res.status(200).json({ message: "–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞." });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–∏—Å—Ü—ñ:", err.message);
    res.status(500).json({
      error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
      details: err.message,
    });
  }
};

module.exports = {
  getSubscriptions,
  subscribeToEntry,
  unsubscribeFromEntry,
};
