const { QueryTypes } = require("sequelize");
const sequelize = require("../config/db"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

/**
 * ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö Project Manager-—ñ–≤ —á–µ—Ä–µ–∑ `user_roles`
 */
const getAllProjectManagers = async (req, res) => {
    try {
        console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö Project Manager-—ñ–≤...");

        const projectManagers = await sequelize.query(
            `SELECT u.id AS pm_id, u.first_name, u.last_name, u.phone, u.email, 
                    r.name AS role
             FROM users u
             LEFT JOIN user_roles ur ON u.id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             WHERE r.name = 'project_manager'
             ORDER BY u.last_name ASC`,
            { type: QueryTypes.SELECT }
        );

        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${projectManagers.length} PM-—ñ–≤.`);
        res.status(200).json(projectManagers);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Project Manager-—ñ–≤:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Project Manager-—ñ–≤." });
    }
};

/**
 /**
 * ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Project Manager –∑–∞ user_id —á–µ—Ä–µ–∑ `user_roles`
 */
const getProjectManagerById = async (req, res) => {
    try {
        let { user_id } = req.params;

        // –Ø–∫—â–æ `user_id` == "me", –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ `req.user.id`
        if (user_id === "me") {
            if (!req.user || !req.user.id) {
                return res.status(401).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π." });
            }
            user_id = req.user.id;
        }

        user_id = parseInt(user_id, 10);

        if (isNaN(user_id)) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id." });
        }

        console.log(`üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ PM –∑ user_id=${user_id}`);

        const projectManager = await sequelize.query(
            `SELECT u.id AS pm_id, u.first_name, u.last_name, u.phone, u.email, 
                    r.name AS role
             FROM users u
             LEFT JOIN user_roles ur ON u.id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             WHERE u.id = :user_id AND r.name = 'project_manager'
             LIMIT 1`,
            {
                replacements: { user_id },
                type: QueryTypes.SELECT,
            }
        );

        if (!projectManager.length) {
            return res.status(404).json({ error: "Project Manager –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π." });
        }

        console.log("‚úÖ Project Manager –∑–Ω–∞–π–¥–µ–Ω–∏–π:", projectManager[0]);
        res.status(200).json(projectManager[0]);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Project Manager:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Project Manager." });
    }
};


/**
 * ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ Project Manager —á–µ—Ä–µ–∑ `user_roles`
 */
const getLoggedProjectManager = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(401).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π." });
        }

        let user_id = parseInt(req.user.id, 10);

        if (isNaN(user_id)) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id." });
        }

        console.log(`üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö Project Manager –¥–ª—è user_id=${user_id}`);

        const projectManager = await sequelize.query(
            `SELECT u.id AS pm_id, u.first_name, u.last_name, u.phone, u.email, 
                    r.name AS role
             FROM users u
             LEFT JOIN user_roles ur ON u.id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             WHERE u.id = :user_id AND r.name = 'project_manager'
             LIMIT 1`,
            {
                replacements: { user_id },
                type: QueryTypes.SELECT,
            }
        );

        if (!projectManager.length) {
            return res.status(404).json({ error: "Project Manager –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π." });
        }

        console.log("üì¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ /api/pm/me:", projectManager[0]);

        res.status(200).json(projectManager[0]);

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–æ–≥–æ Project Manager:", error);
        res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Project Manager.", details: error.message });
    }
};

console.log("üü¢ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä projectManagerController.js –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
module.exports = { getAllProjectManagers, getProjectManagerById, getLoggedProjectManager };
