const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const sequelize = require("../config/db");
const { QueryTypes } = require("sequelize");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// Логування
const log = (level, message, details = {}) => {
  const timestamp = new Date().toISOString();
  console[level](`[${timestamp}] ${message}`);
  if (Object.keys(details).length) {
    console[level](`[DETAILS] ${JSON.stringify(details, null, 2)}`);
  }
};

// Генерація токена
const generateToken = (user) => {
  return jwt.sign(
    {
      user_id: user.id,
      role: user.role,
    },
    JWT_SECRET,
    { expiresIn: "5h" }
  );
};

// Реєстрація
const register = async (req, res) => {
  log("info", "Запит на реєстрацію", {
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    body: req.body,
  });

  try {
    const { first_name, last_name, email, password, phone, role_id } = req.body;

    if (!first_name || !last_name || !email || !password || !phone || !role_id) {
      return res.status(400).json({ message: "Всі поля обов'язкові" });
    }

    const [existingUser] = await sequelize.query(
      `SELECT * FROM user_roles WHERE email = $1`,
      { bind: [email], type: QueryTypes.SELECT }
    );

    if (existingUser) {
      return res.status(400).json({ message: "Користувач з цим email вже існує" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const roleName = role_id === 1 ? "worker" : role_id === 2 ? "ambassador" : "user";

    const [newUser] = await sequelize.query(
      `INSERT INTO user_roles (first_name, last_name, email, password, phone, role_id, role)
       VALUES ($1, $2, $3, $4, $5, $6, $7)
       RETURNING *`,
      {
        bind: [first_name, last_name, email, hashedPassword, phone, role_id, roleName],
        type: QueryTypes.INSERT,
      }
    );

    return res.status(201).json({
      message: "Користувач успішно зареєстрований",
      user: { id: newUser.id, email: newUser.email, role: newUser.role },
    });
  } catch (error) {
    log("error", "Помилка при реєстрації", { message: error.message, stack: error.stack });
    return res.status(500).json({ message: "Помилка сервера", error: error.message });
  }
};

// Вхід
const login = async (req, res) => {
  log("info", "Запит на вхід", {
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    body: req.body,
  });

  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Всі поля обов'язкові" });
    }

    const [user] = await sequelize.query(
      `SELECT * FROM user_roles WHERE email = $1`,
      { bind: [email], type: QueryTypes.SELECT }
    );

    if (!user) {
      return res.status(404).json({ message: "Користувача не знайдено" });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: "Невірний пароль" });
    }

    const token = generateToken(user);

    return res.status(200).json({
      message: "Вхід виконано успішно",
      token,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
      },
    });
  } catch (error) {
    log("error", "Помилка при вході", { message: error.message, stack: error.stack });
    return res.status(500).json({ message: "Помилка сервера", error: error.message });
  }
};

// Обробка 404
const notFound = (req, res) => {
  log("warn", "Маршрут не знайдено", {
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
  });
  res.status(404).json({ message: "Маршрут не знайдено" });
};

module.exports = {
  register,
  login,
  notFound,
};
