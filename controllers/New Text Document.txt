const Like = require("../models/like");
const User = require("../models/users");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ? Отримуємо user_id з JWT
const getUserIdFromToken = (req) => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) return null;

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        return decoded.user_id || null;
    } catch (error) {
        console.error("? Помилка декодування токена:", error.message);
        return null;
    }
};

// ? Додавання або видалення лайка
const toggleLike = async (req, res) => {
  try {
    const { blog_id, idea_id } = req.body;
    let user_id = req.user?.user_id || getUserIdFromToken(req);

    // Якщо user_id відсутнє, то повертаємо помилку
    if (!user_id) {
      console.error("[toggleLike] ? Відсутній user_id");
      return res.status(400).json({ message: "Необхідно вказати user_id." });
    }

    // Якщо передано blog_id або idea_id, використовуємо їх
    const likeData = blog_id ? { blog_id, user_id } : { idea_id, user_id };

    // Перевіряємо, чи існує лайк для цього ресурсу
    const existingLike = await Like.findOne({ where: likeData });

    const user = await User.findByPk(user_id, { attributes: ["id", "first_name", "last_name"] });
    if (!user) {
      console.error(`[toggleLike] ? Користувач ${user_id} не знайдений.`);
      return res.status(404).json({ message: "Користувач не знайдений." });
    }

    if (existingLike) {
      // Якщо лайк існує, видаляємо його
      await existingLike.destroy();
      const totalLikes = await Like.count({ where: { [blog_id ? 'blog_id' : 'idea_id']: blog_id || idea_id } });
      return res.status(200).json({ liked: false, likesCount: totalLikes, user, message: "Лайк видалено." });
    } else {
      // Якщо лайка немає, додаємо новий
      await Like.create(likeData);
      const totalLikes = await Like.count({ where: { [blog_id ? 'blog_id' : 'idea_id']: blog_id || idea_id } });
      return res.status(201).json({ liked: true, likesCount: totalLikes, user, message: "Лайк успішно додано." });
    }
  } catch (error) {
    console.error("[toggleLike] ? Помилка:", error);
    res.status(500).json({ message: "Помилка сервера.", error: error.message });
  }
};



// ? Отримання всіх лайків для блогу
const getLikesByBlogId = async (req, res) => {
    try {
        const { blog_id } = req.params;
        if (!blog_id) {
            console.error("[getLikesByBlogId] ? Відсутній blog_id");
            return res.status(400).json({ message: "Необхідно вказати blog_id." });
        }

        const likes = await Like.findAll({
            where: { blog_id },
            include: [{ model: User, as: "user", attributes: ["id", "first_name", "last_name"] }]
        });

        const totalLikes = likes.length;
        const likedByUsers = likes.map(like => ({
            id: like.user.id,
            name: `${like.user.first_name} ${like.user.last_name}`
        }));

        console.log(`[getLikesByBlogId] ? Запис ${blog_id} має ${totalLikes} лайків.`);
        res.status(200).json({ likesCount: totalLikes, likedBy: likedByUsers });

    } catch (error) {
        console.error("[getLikesByBlogId] ? Помилка:", error);
        res.status(500).json({ message: "Помилка сервера.", error: error.message });
    }
};

// ? Отримати всі лайки всіх користувачів по блогах
const getUserLikes = async (req, res) => {
    try {
        const likes = await Like.findAll({
            attributes: ["blog_id", "user_id"],
            include: [{ model: User, as: "user", attributes: ["id", "first_name", "last_name"] }]
        });

        if (!likes.length) {
            console.log("[getUserLikes] ? Немає лайків у системі.");
            return res.status(200).json({ message: "Поки що немає лайків." });
        }

        const likesByBlog = {};
        likes.forEach(like => {
            const blogId = like.blog_id;
            if (!likesByBlog[blogId]) {
                likesByBlog[blogId] = {
                    likesCount: 0,
                    likedBy: []
                };
            }
            likesByBlog[blogId].likesCount++;
            likesByBlog[blogId].likedBy.push({
                id: like.user.id,
                name: `${like.user.first_name} ${like.user.last_name}`
            });
        });

        console.log("[getUserLikes] ? Лайки успішно отримані.");
        res.status(200).json(likesByBlog);

    } catch (error) {
        console.error("[getUserLikes] ? Помилка:", error);
        res.status(500).json({ message: "Помилка сервера.", error: error.message });
    }
};

module.exports = {
    toggleLike,
    getLikesByBlogId,
    getUserLikes,
};
