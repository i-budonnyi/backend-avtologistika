const { QueryTypes } = require("sequelize");
const sequelize = require("../config/db"); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

const JuryVotingController = {
  async vote(req, res) {
    try {
      const { agenda_id, decision_type, comment, bonus_amount, review_date } = req.body;

      console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:", req.body);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ä—ñ—à–µ–Ω–Ω—è –ø–æ —Ü—å–æ–º—É –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–º—É
      const existingVote = await sequelize.query(
        `SELECT id FROM jury_decisions WHERE agenda_id = :agendaId LIMIT 1`,
        {
          replacements: { agendaId: agenda_id },
          type: QueryTypes.SELECT,
        }
      );

      if (existingVote.length > 0) {
        console.warn(`‚ö†Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ agenda_id=${agenda_id} –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ`);
        return res.status(403).json({ message: "–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ —Ü—å–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ" });
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      const user_id = req.user.id;

      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∂—É—Ä—ñ
      const juryResult = await sequelize.query(
        `SELECT id FROM jury_members WHERE user_id = :userId LIMIT 1`,
        {
          replacements: { userId: user_id },
          type: QueryTypes.SELECT,
        }
      );

      if (juryResult.length === 0) {
        console.warn("‚ö†Ô∏è –ß–ª–µ–Ω –∂—É—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π:", user_id);
        return res.status(404).json({ message: "–ß–ª–µ–Ω –∂—É—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
      }

      const jury_member_id = juryResult[0].id;

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏
      let paymentStatus = "pending";
      const bonus = Number(bonus_amount) || 0;
      if (bonus > 0) {
        paymentStatus = "approved";
      }

      // –í—Å—Ç–∞–≤–∫–∞ –≥–æ–ª–æ—Å—É —É —Ç–∞–±–ª–∏—Ü—é jury_decisions
      const result = await sequelize.query(
        `INSERT INTO jury_decisions 
          (agenda_id, user_id, jury_member_id, decision_text, decision_type, decision, bonus_amount, submission_date, payment_status, review_date)
         VALUES (:agendaId, :userId, :juryMemberId, :comment, :decisionType, :decisionType, :bonusAmount, NOW(), :paymentStatus, :reviewDate)
         RETURNING *;`,
        {
          replacements: {
            agendaId: agenda_id,
            userId: user_id,
            juryMemberId: jury_member_id,
            comment: comment,
            decisionType: decision_type,
            decision: decision_type,
            bonusAmount: bonus,
            paymentStatus: paymentStatus,
            reviewDate: review_date || null,
          },
          type: QueryTypes.INSERT,
        }
      );

      // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É `agenda`
      await sequelize.query(
        `UPDATE agenda SET decision_type = :decisionType WHERE id = :agendaId`,
        {
          replacements: { decisionType: decision_type, agendaId: agenda_id },
          type: QueryTypes.UPDATE,
        }
      );

      console.log("‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", result[0]);
      return res.status(201).json({ message: "–ì–æ–ª–æ—Å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", decision: result[0] });
    } catch (error) {
      console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—ñ:", error);
      return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º —Ä—ñ—à–µ–Ω—å
  async getAgendaWithDecisions(req, res) {
    try {
      const { filterBy } = req.query;
      let filterCondition = "";

      if (filterBy === "approved") {
        filterCondition = "WHERE a.decision_type IS NOT NULL";
      } else if (filterBy === "pending") {
        filterCondition = "WHERE a.decision_type IS NULL";
      }

      const agenda = await sequelize.query(
        `SELECT a.*, jd.decision_type
         FROM agenda a
         LEFT JOIN jury_decisions jd ON a.id = jd.agenda_id
         ${filterCondition}`,
        { type: QueryTypes.SELECT }
      );

      console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π —ñ–∑ —Ä—ñ—à–µ–Ω–Ω—è–º–∏:", agenda.length);
      res.status(200).json(agenda);
    } catch (error) {
      console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ:", error);
      res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = JuryVotingController;
