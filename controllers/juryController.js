const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");
const { io } = require("../index"); // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ io –¥–ª—è WebSocket

// ‚úÖ –î–æ–¥–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –∂—É—Ä—ñ
const addDecision = async (req, res) => {
  try {
    const { project_id, user_id, jury_member_id, decision, bonus_amount } = req.body;

    if (!project_id || !user_id || !jury_member_id || !decision) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è." });
    }

    const [newDecision] = await sequelize.query(
      `INSERT INTO jury_decisions (project_id, user_id, jury_member_id, decision, bonus_amount, created_at)
       VALUES (:project_id, :user_id, :jury_member_id, :decision, :bonus_amount, NOW())
       RETURNING *`,
      {
        replacements: { project_id, user_id, jury_member_id, decision, bonus_amount },
        type: QueryTypes.INSERT,
      }
    );

    await sequelize.query(
      `INSERT INTO jury_logs (jury_member_id, action, created_at)
       VALUES (:jury_member_id, 'added decision', NOW())`,
      {
        replacements: { jury_member_id },
        type: QueryTypes.INSERT,
      }
    );

    // üì° –í–µ–±—Å–æ–∫–µ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    io.emit("jury_decision_added", { decision: newDecision });

    res.status(201).json({ message: "–†—ñ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.", newDecision });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—î–∫—Ç—É
const getDecisionsForProject = async (req, res) => {
  try {
    const { project_id } = req.params;

    if (!project_id) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ project_id." });
    }

    const decisions = await sequelize.query(
      `SELECT * FROM jury_decisions WHERE project_id = :project_id`,
      {
        replacements: { project_id },
        type: QueryTypes.SELECT,
      }
    );

    res.status(200).json(decisions);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä—ñ—à–µ–Ω—å:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥ –¥—ñ–π –∂—É—Ä—ñ
const getJuryLogs = async (req, res) => {
  try {
    const { jury_member_id } = req.params;

    if (!jury_member_id) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ jury_member_id." });
    }

    const logs = await sequelize.query(
      `SELECT * FROM jury_logs WHERE jury_member_id = :jury_member_id ORDER BY created_at DESC`,
      {
        replacements: { jury_member_id },
        type: QueryTypes.SELECT,
      }
    );

    res.status(200).json(logs);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–≥—ñ–≤:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

// ‚úÖ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ
const addJuryMember = async (req, res) => {
  try {
    const { name, role } = req.body;

    if (!name || !role) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º‚Äô—è —Ç–∞ —Ä–æ–ª—å." });
    }

    const [newJuryMember] = await sequelize.query(
      `INSERT INTO jury_members (name, role, created_at)
       VALUES (:name, :role, NOW())
       RETURNING *`,
      {
        replacements: { name, role },
        type: QueryTypes.INSERT,
      }
    );

    res.status(201).json({ message: "–ß–ª–µ–Ω –∂—É—Ä—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.", newJuryMember });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–ª–µ–Ω–∞ –∂—É—Ä—ñ:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", error: error.message });
  }
};

module.exports = {
  addDecision,
  getDecisionsForProject,
  getJuryLogs,
  addJuryMember,
};
