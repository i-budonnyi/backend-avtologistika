const { QueryTypes } = require("sequelize");
const sequelize = require("../config/database");

/**
 * ‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º (–ó–∞–ø–∏—Å —É –ë–î)
 */
const returnApplication = async (req, res) => {
    try {
        const { application_id, comment } = req.body;
        const secretary_id = req.user.id; // ID —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∑ —Ç–æ–∫–µ–Ω–∞

        if (!application_id || !comment) {
            return res.status(400).json({ message: "‚ùå –í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏!" });
        }

        console.log(`üìå –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ ID=${application_id} –≤—ñ–¥ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è ID=${secretary_id}`);

        // –û—Ç—Ä–∏–º–∞—Ç–∏ `user_id` (–∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏)
        const application = await sequelize.query(
            `SELECT user_id FROM applications WHERE id = :application_id`,
            { replacements: { application_id }, type: QueryTypes.SELECT }
        );

        if (!application || application.length === 0) {
            return res.status(404).json({ message: "‚ùå –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        }

        const user_id = application[0].user_id; // –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏

        // –ó–∞–ø–∏—Å —É `application_returns`
        const [result] = await sequelize.query(
            `INSERT INTO application_returns (application_id, secretary_id, ambassador_id, comment, returned_at)
             VALUES (:application_id, :secretary_id, :ambassador_id, :comment, NOW()) RETURNING *`,
            {
                replacements: { application_id, secretary_id, ambassador_id: user_id, comment },
                type: QueryTypes.INSERT,
            }
        );

        console.log("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞:", result);
        res.status(201).json({ message: "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∞!", application_return: result });

    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:", error);
        res.status(500).json({ message: "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.", error: error.message });
    }
};

/**
 * ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏)
 */
const getReturnedApplicationsForUser = async (req, res) => {
    try {
        const user_id = req.user.id; // –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ (—Ç–æ–π, —Ö—Ç–æ —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç)

        console.log(`üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID=${user_id}`);

        // –í–∏–±—ñ—Ä–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const returnedApplications = await sequelize.query(
            `SELECT ar.id, ar.application_id, ar.comment, ar.returned_at,
                    a.title AS application_title, s.first_name AS secretary_name, s.last_name AS secretary_surname
             FROM application_returns ar
             JOIN applications a ON ar.application_id = a.id
             JOIN users s ON ar.secretary_id = s.id
             WHERE ar.ambassador_id = :user_id
             ORDER BY ar.returned_at DESC`,
            {
                replacements: { user_id },
                type: QueryTypes.SELECT,
            }
        );

        console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${returnedApplications.length} –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.`);
        res.status(200).json(returnedApplications);

    } catch (error) {
        console.error("[ERROR] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫:", error);
        res.status(500).json({ message: "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.", error: error.message });
    }
};

console.log("üü¢ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä `applicationReturnsController.js` –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
module.exports = {
    returnApplication,
    getReturnedApplicationsForUser
};
