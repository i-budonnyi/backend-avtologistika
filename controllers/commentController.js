const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// üîê Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const authenticateUser = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è. –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π." });
    }

    const token = authHeader.split(" ")[1];
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const user_id = decoded.user_id || decoded.id;

        if (!user_id) {
            return res.status(401).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω: user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π." });
        }

        req.user = { user_id };
        console.log(`[AUTH] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: ${user_id}`);
        next();
    } catch (error) {
        console.error("[AUTH] ‚ùå", error.message);
        return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
};

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –∑–∞–ø–∏—Å—É
const getCommentsByEntry = async (req, res) => {
    const { entry_id } = req.params;
    if (!entry_id) return res.status(400).json({ error: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ entry_id." });

    try {
        const comments = await sequelize.query(
            `SELECT 
                c.id, 
                c.comment AS text,
                c.created_at AS createdAt,
                u.id AS authorId,
                CONCAT(u.first_name, ' ', u.last_name) AS authorName,
                CASE 
                    WHEN c.blog_id IS NOT NULL THEN 'blog'
                    WHEN c.idea_id IS NOT NULL THEN 'idea'
                    WHEN c.problem_id IS NOT NULL THEN 'problem'
                END AS entry_type
             FROM comments c
             LEFT JOIN users u ON c.user_id = u.id
             WHERE c.blog_id = :entry_id OR c.idea_id = :entry_id OR c.problem_id = :entry_id
             ORDER BY c.created_at DESC`,
            { replacements: { entry_id }, type: QueryTypes.SELECT }
        );

        res.status(200).json({ comments });
    } catch (err) {
        console.error("[getCommentsByEntry] ‚ùå", err.message);
        res.status(500).json({ error: err.message });
    }
};

// ‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const addComment = async (req, res) => {
    const { entry_id, entry_type, text } = req.body;
    const user_id = req.user?.user_id;

    if (!entry_id || !entry_type || !text || !user_id) {
        return res.status(400).json({ error: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ (entry_id, entry_type, text, user_id)." });
    }

    const column =
        entry_type === "blog" ? "blog_id" :
        entry_type === "idea" ? "idea_id" :
        entry_type === "problem" ? "problem_id" : null;

    if (!column) {
        return res.status(400).json({ error: "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Å—É." });
    }

    try {
        await sequelize.query(
            `INSERT INTO comments (${column}, user_id, comment, created_at, updated_at)
             VALUES (:entry_id, :user_id, :text, NOW(), NOW())`,
            {
                replacements: { entry_id, user_id, text },
                type: QueryTypes.INSERT,
            }
        );

        console.log(`[addComment] ‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ ${entry_type} ID ${entry_id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user_id}`);
        res.status(201).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ." });
    } catch (err) {
        console.error("[addComment] ‚ùå", err.message);
        res.status(500).json({ error: err.message });
    }
};

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
const deleteComment = async (req, res) => {
    const { id } = req.params;
    const user_id = req.user?.user_id;

    if (!id || !user_id) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ ID –∫–æ–º–µ–Ω—Ç–∞—Ä—è —ñ –±—É—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º." });
    }

    try {
        const [comment] = await sequelize.query(
            `SELECT id, user_id FROM comments WHERE id = :comment_id`,
            { replacements: { comment_id: id }, type: QueryTypes.SELECT }
        );

        if (!comment) return res.status(404).json({ error: "–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        if (comment.user_id !== user_id)
            return res.status(403).json({ error: "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ. –¶–µ –Ω–µ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä." });

        await sequelize.query(
            `DELETE FROM comments WHERE id = :comment_id`,
            { replacements: { comment_id: id }, type: QueryTypes.DELETE }
        );

        console.log(`[deleteComment] ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä ID ${id}`);
        res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." });
    } catch (err) {
        console.error("[deleteComment] ‚ùå", err.message);
        res.status(500).json({ error: err.message });
    }
};

// üì¶ –ï–∫—Å–ø–æ—Ä—Ç
module.exports = {
    authenticateUser,
    getCommentsByEntry,
    addComment,
    deleteComment,
};
