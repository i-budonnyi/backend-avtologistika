const sequelize = require("../config/database");
const { QueryTypes } = require("sequelize");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

// ‚úÖ Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT
const authenticateUser = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è. –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω." });
    }

    const token = authHeader.split(" ")[1];

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = { user_id: decoded.user_id || decoded.id };

        if (!req.user.user_id) {
            return res.status(401).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ userId." });
        }

        console.log(`[AUTH] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: ${req.user.user_id}`);
        next();
    } catch (error) {
        return res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ (–ø—É–±–ª—ñ—á–Ω–æ)
const getCommentsByEntry = async (req, res) => {
    try {
        const { entry_id } = req.params;

        if (!entry_id) {
            return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ entry_id (ID –∑–∞–ø–∏—Å—É)." });
        }

        console.log(`[getCommentsByEntry] üí¨ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É ID ${entry_id}`);

        const comments = await sequelize.query(
            `SELECT 
                c.id, 
                c.comment AS text, 
                c.created_at AS createdAt,
                u.id AS authorId, 
                CONCAT(u.first_name, ' ', u.last_name) AS authorName,
                CASE 
                    WHEN c.blog_id IS NOT NULL THEN 'blog'
                    WHEN c.idea_id IS NOT NULL THEN 'idea'
                    WHEN c.problem_id IS NOT NULL THEN 'problem'
                END AS entry_type
            FROM comments c
            LEFT JOIN users u ON c.user_id = u.id
            WHERE c.blog_id = :entry_id OR c.idea_id = :entry_id OR c.problem_id = :entry_id
            ORDER BY c.created_at DESC`,
            { replacements: { entry_id }, type: QueryTypes.SELECT }
        );

        console.log(`[getCommentsByEntry] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.`);
        res.status(200).json({ comments });
    } catch (error) {
        console.error("[getCommentsByEntry] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:", error);
        res.status(500).json({ error: error.message });
    }
};

const addComment = async (req, res) => {
    try {
        const { entry_id, entry_type, text } = req.body;
        const user_id = req.user?.user_id;

        if (!entry_id || !entry_type || !text) {
            return res.status(400).json({ error: "ID –∑–∞–ø–∏—Å—É, —Ç–∏–ø —ñ —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ." });
        }

        if (!user_id) {
            return res.status(403).json({ error: "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ." });
        }

        console.log(`[addComment] üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è... User ID: ${user_id}, Entry ID: ${entry_id}, Type: ${entry_type}`);

        const column = entry_type === "blog" ? "blog_id"
                      : entry_type === "idea" ? "idea_id"
                      : "problem_id";

        await sequelize.query(
            `INSERT INTO comments (${column}, user_id, content, created_at, updated_at)
             VALUES (:entry_id, :user_id, :text, NOW(), NOW())`,
            {
                replacements: { entry_id, user_id, text },
                type: QueryTypes.INSERT,
            }
        );

        console.log("[addComment] ‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.");
        res.status(201).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ." });
    } catch (error) {
        console.error("[addComment] ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", error);
        res.status(500).json({ error: error.message });
    }
};


// ‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä (—Ç—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä)
const deleteComment = async (req, res) => {
    try {
        const { id } = req.params;
        const user_id = req.user.user_id;

        console.log(`[deleteComment] üóë –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è ID ${id}...`);

        const [comment] = await sequelize.query(
            `SELECT id, user_id FROM comments WHERE id = :comment_id`,
            { replacements: { comment_id: id }, type: QueryTypes.SELECT }
        );

        if (!comment) {
            return res.status(404).json({ error: "–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        }

        if (comment.user_id !== user_id) {
            return res.status(403).json({ error: "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶–µ –Ω–µ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä." });
        }

        await sequelize.query(
            `DELETE FROM comments WHERE id = :comment_id`,
            { replacements: { comment_id: id }, type: QueryTypes.DELETE }
        );

        console.log("[deleteComment] ‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
        res.status(200).json({ message: "–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." });
    } catch (error) {
        console.error("[deleteComment] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", error);
        res.status(500).json({ error: error.message });
    }
};

// ‚úÖ –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ
module.exports = {
    getCommentsByEntry,
    addComment,
    deleteComment,
    authenticateUser // üîÑ –î–æ–¥–∞—î–º–æ middleware —Ç—É—Ç
};
